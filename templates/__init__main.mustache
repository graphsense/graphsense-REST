import os
import connexion
import aiohttp_cors
import gsrest.db
import yaml

CONFIG_FILE = "./instance/config.yaml"


def load_config(config_file):
    if not os.path.exists(config_file):
        raise ValueError("Config file {} not found."
                         .format(config_file))

    with open(config_file, 'r') as input_file:
        config = yaml.safe_load(input_file)
    return config


def factory(args=None):
    options = {
        "swagger_ui": True,
        "serve_spec": True
        }
    specification_dir = os.path.join(os.path.dirname(__file__), 'openapi')
    app = connexion.AioHttpApp(__name__, 
                               specification_dir=specification_dir, 
                               only_one_api=True,
                               options=options)
    openapi_yaml = 'openapi.yaml'
    app.add_api(openapi_yaml,
                arguments={'title': '{{appName}}'},
                pythonic_params=True,
                pass_context_arg_name='request')
    config_file = CONFIG_FILE
    if args:
        config_file = args
    app.app.logger.info(f'reading config from {config_file}')
    app.app['config'] = load_config(config_file)
    with open(os.path.join(specification_dir, openapi_yaml)) as yaml_file:
        app.app['openapi'] = yaml.safe_load(yaml_file)

    app.app.cleanup_ctx.append(gsrest.db.get_connection)

    origins = app.app['config']['ALLOWED_ORIGINS'] \
        if 'ALLOWED_ORIGINS' in app.app['config'] else '*'

    app.app.logger.info('ALLOWED_ORIGINS: {}'.format(origins))
    # Enable CORS for all origins.
    cors = aiohttp_cors.setup(app.app, defaults={
        origins: aiohttp_cors.ResourceOptions(
            allow_credentials=True,
            expose_headers="*",
            allow_headers="*",
        )
    })

    # Register all routers for CORS.
    for route in list(app.app.router.routes()):
        cors.add(route)

    return app


def main(args=None):
    return factory(args).app


def run(args=None):
    factory().run(port=8080)
