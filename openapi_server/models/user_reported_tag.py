# coding: utf-8
from gsrest.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UserReportedTag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, network: str=None, label: str=None, actor: str=None, description: str=None):
        """UserReportedTag - a model defined in OpenAPI

        :param address: The address of this UserReportedTag.
        :param network: The network of this UserReportedTag.
        :param label: The label of this UserReportedTag.
        :param actor: The actor of this UserReportedTag.
        :param description: The description of this UserReportedTag.
        """
        self.openapi_types = {
            'address': str,
            'network': str,
            'label': str,
            'actor': str,
            'description': str
        }

        self.attribute_map = {
            'address': 'address',
            'network': 'network',
            'label': 'label',
            'actor': 'actor',
            'description': 'description'
        }

        self._address = address
        self._network = network
        self._label = label
        self._actor = actor
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserReportedTag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user_reported_tag of this UserReportedTag.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The UserReportedTag as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'address': self._address,
            'network': self._network,
            'label': self._label,
            'actor': self._actor,
            'description': self._description }


    @property
    def address(self):
        """Gets the address of this UserReportedTag.


        :return: The address of this UserReportedTag.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UserReportedTag.


        :param address: The address of this UserReportedTag.
        :type address: str
        """
        if address is None:
            raise BadUserInputException("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def network(self):
        """Gets the network of this UserReportedTag.


        :return: The network of this UserReportedTag.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this UserReportedTag.


        :param network: The network of this UserReportedTag.
        :type network: str
        """
        if network is None:
            raise BadUserInputException("Invalid value for `network`, must not be `None`")

        self._network = network

    @property
    def label(self):
        """Gets the label of this UserReportedTag.


        :return: The label of this UserReportedTag.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this UserReportedTag.


        :param label: The label of this UserReportedTag.
        :type label: str
        """
        if label is None:
            raise BadUserInputException("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def actor(self):
        """Gets the actor of this UserReportedTag.


        :return: The actor of this UserReportedTag.
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this UserReportedTag.


        :param actor: The actor of this UserReportedTag.
        :type actor: str
        """
        if actor is None:
            raise BadUserInputException("Invalid value for `actor`, must not be `None`")

        self._actor = actor

    @property
    def description(self):
        """Gets the description of this UserReportedTag.


        :return: The description of this UserReportedTag.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UserReportedTag.


        :param description: The description of this UserReportedTag.
        :type description: str
        """
        if description is None:
            raise BadUserInputException("Invalid value for `description`, must not be `None`")

        self._description = description
