# coding: utf-8
from gsrest.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.token_config import TokenConfig
from openapi_server import util


class TokenConfigs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token_configs: List[TokenConfig]=None):
        """TokenConfigs - a model defined in OpenAPI

        :param token_configs: The token_configs of this TokenConfigs.
        """
        self.openapi_types = {
            'token_configs': List[TokenConfig]
        }

        self.attribute_map = {
            'token_configs': 'token_configs'
        }

        self._token_configs = token_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenConfigs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The token_configs of this TokenConfigs.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The TokenConfigs as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'token_configs': self._token_configs }


    @property
    def token_configs(self):
        """Gets the token_configs of this TokenConfigs.

        list of supported tokens and their parameters

        :return: The token_configs of this TokenConfigs.
        :rtype: List[TokenConfig]
        """
        return self._token_configs

    @token_configs.setter
    def token_configs(self, token_configs):
        """Sets the token_configs of this TokenConfigs.

        list of supported tokens and their parameters

        :param token_configs: The token_configs of this TokenConfigs.
        :type token_configs: List[TokenConfig]
        """
        if token_configs is None:
            raise BadUserInputException("Invalid value for `token_configs`, must not be `None`")

        self._token_configs = token_configs
