# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.block_tx_summary import BlockTxSummary
from openapi_server import util

from openapi_server.models.block_tx_summary import BlockTxSummary  # noqa: E501

class BlockTxs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height=None, txs=None):  # noqa: E501
        """BlockTxs - a model defined in OpenAPI

        :param height: The height of this BlockTxs.  # noqa: E501
        :type height: int
        :param txs: The txs of this BlockTxs.  # noqa: E501
        :type txs: List[BlockTxSummary]
        """
        self.openapi_types = {
            'height': int,
            'txs': List[BlockTxSummary]
        }

        self.attribute_map = {
            'height': 'height',
            'txs': 'txs'
        }

        self._height = height
        self._txs = txs

    @classmethod
    def from_dict(cls, dikt) -> 'BlockTxs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The block_txs of this BlockTxs.  # noqa: E501
        :rtype: BlockTxs
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The BlockTxs as a dict
        :rtype: dict
        """
        return { 'height': self._height,
            'txs': self._txs }


    @property
    def height(self):
        """Gets the height of this BlockTxs.

        Height  # noqa: E501

        :return: The height of this BlockTxs.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this BlockTxs.

        Height  # noqa: E501

        :param height: The height of this BlockTxs.
        :type height: int
        """
        if height is not None and height < 1:  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `1`")  # noqa: E501

        self._height = height

    @property
    def txs(self):
        """Gets the txs of this BlockTxs.


        :return: The txs of this BlockTxs.
        :rtype: List[BlockTxSummary]
        """
        return self._txs

    @txs.setter
    def txs(self, txs):
        """Sets the txs of this BlockTxs.


        :param txs: The txs of this BlockTxs.
        :type txs: List[BlockTxSummary]
        """

        self._txs = txs
