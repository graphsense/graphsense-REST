# coding: utf-8
from gsrest.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.address import Address
from openapi_server.models.neighbor_entity import NeighborEntity
from openapi_server import util


class SearchResultLeaf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, neighbor: NeighborEntity=None, matching_addresses: List[Address]=None):
        """SearchResultLeaf - a model defined in OpenAPI

        :param neighbor: The neighbor of this SearchResultLeaf.
        :param matching_addresses: The matching_addresses of this SearchResultLeaf.
        """
        self.openapi_types = {
            'neighbor': NeighborEntity,
            'matching_addresses': List[Address]
        }

        self.attribute_map = {
            'neighbor': 'neighbor',
            'matching_addresses': 'matching_addresses'
        }

        self._neighbor = neighbor
        self._matching_addresses = matching_addresses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResultLeaf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The search_result_leaf of this SearchResultLeaf.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The SearchResultLeaf as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'neighbor': self._neighbor,
            'matching_addresses': self._matching_addresses }


    @property
    def neighbor(self):
        """Gets the neighbor of this SearchResultLeaf.


        :return: The neighbor of this SearchResultLeaf.
        :rtype: NeighborEntity
        """
        return self._neighbor

    @neighbor.setter
    def neighbor(self, neighbor):
        """Sets the neighbor of this SearchResultLeaf.


        :param neighbor: The neighbor of this SearchResultLeaf.
        :type neighbor: NeighborEntity
        """
        if neighbor is None:
            raise BadUserInputException("Invalid value for `neighbor`, must not be `None`")

        self._neighbor = neighbor

    @property
    def matching_addresses(self):
        """Gets the matching_addresses of this SearchResultLeaf.


        :return: The matching_addresses of this SearchResultLeaf.
        :rtype: List[Address]
        """
        return self._matching_addresses

    @matching_addresses.setter
    def matching_addresses(self, matching_addresses):
        """Sets the matching_addresses of this SearchResultLeaf.


        :param matching_addresses: The matching_addresses of this SearchResultLeaf.
        :type matching_addresses: List[Address]
        """
        if matching_addresses is None:
            raise BadUserInputException("Invalid value for `matching_addresses`, must not be `None`")

        self._matching_addresses = matching_addresses
