# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.neighbor_entity import NeighborEntity
from openapi_server import util


class NeighborEntities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, neighbors: List[NeighborEntity]=None, next_page: str=None):
        """NeighborEntities - a model defined in OpenAPI

        :param neighbors: The neighbors of this NeighborEntities.
        :param next_page: The next_page of this NeighborEntities.
        """
        self.openapi_types = {
            'neighbors': List[NeighborEntity],
            'next_page': str
        }

        self.attribute_map = {
            'neighbors': 'neighbors',
            'next_page': 'next_page'
        }

        self._neighbors = neighbors
        self._next_page = next_page

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NeighborEntities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The neighbor_entities of this NeighborEntities.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The NeighborEntities as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'neighbors': self._neighbors,
            'next_page': self._next_page }


    @property
    def neighbors(self):
        """Gets the neighbors of this NeighborEntities.


        :return: The neighbors of this NeighborEntities.
        :rtype: List[NeighborEntity]
        """
        return self._neighbors

    @neighbors.setter
    def neighbors(self, neighbors):
        """Sets the neighbors of this NeighborEntities.


        :param neighbors: The neighbors of this NeighborEntities.
        :type neighbors: List[NeighborEntity]
        """
        if neighbors is None:
            raise ValueError("Invalid value for `neighbors`, must not be `None`")

        self._neighbors = neighbors

    @property
    def next_page(self):
        """Gets the next_page of this NeighborEntities.


        :return: The next_page of this NeighborEntities.
        :rtype: str
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this NeighborEntities.


        :param next_page: The next_page of this NeighborEntities.
        :type next_page: str
        """

        self._next_page = next_page
