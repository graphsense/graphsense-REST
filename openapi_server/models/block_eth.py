# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BlockEth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_hash=None, height=None, no_txs=None, timestamp=None):  # noqa: E501
        """BlockEth - a model defined in OpenAPI

        :param block_hash: The block_hash of this BlockEth.  # noqa: E501
        :type block_hash: str
        :param height: The height of this BlockEth.  # noqa: E501
        :type height: int
        :param no_txs: The no_txs of this BlockEth.  # noqa: E501
        :type no_txs: int
        :param timestamp: The timestamp of this BlockEth.  # noqa: E501
        :type timestamp: int
        """
        self.openapi_types = {
            'block_hash': str,
            'height': int,
            'no_txs': int,
            'timestamp': int
        }

        self.attribute_map = {
            'block_hash': 'block_hash',
            'height': 'height',
            'no_txs': 'no_txs',
            'timestamp': 'timestamp'
        }

        self._block_hash = block_hash
        self._height = height
        self._no_txs = no_txs
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'BlockEth':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The block_eth of this BlockEth.  # noqa: E501
        :rtype: BlockEth
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The BlockEth as a dict
        :rtype: dict
        """
        return { 'block_hash': self._block_hash,
            'height': self._height,
            'no_txs': self._no_txs,
            'timestamp': self._timestamp }


    @property
    def block_hash(self):
        """Gets the block_hash of this BlockEth.


        :return: The block_hash of this BlockEth.
        :rtype: str
        """
        return self._block_hash

    @block_hash.setter
    def block_hash(self, block_hash):
        """Sets the block_hash of this BlockEth.


        :param block_hash: The block_hash of this BlockEth.
        :type block_hash: str
        """

        self._block_hash = block_hash

    @property
    def height(self):
        """Gets the height of this BlockEth.

        Height  # noqa: E501

        :return: The height of this BlockEth.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this BlockEth.

        Height  # noqa: E501

        :param height: The height of this BlockEth.
        :type height: int
        """
        if height is not None and height < 1:  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `1`")  # noqa: E501

        self._height = height

    @property
    def no_txs(self):
        """Gets the no_txs of this BlockEth.


        :return: The no_txs of this BlockEth.
        :rtype: int
        """
        return self._no_txs

    @no_txs.setter
    def no_txs(self, no_txs):
        """Sets the no_txs of this BlockEth.


        :param no_txs: The no_txs of this BlockEth.
        :type no_txs: int
        """

        self._no_txs = no_txs

    @property
    def timestamp(self):
        """Gets the timestamp of this BlockEth.


        :return: The timestamp of this BlockEth.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this BlockEth.


        :param timestamp: The timestamp of this BlockEth.
        :type timestamp: int
        """

        self._timestamp = timestamp
