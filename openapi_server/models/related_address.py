# coding: utf-8
from graphsenselib.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class RelatedAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, currency: str=None, relation_type: str=None):
        """RelatedAddress - a model defined in OpenAPI

        :param address: The address of this RelatedAddress.
        :param currency: The currency of this RelatedAddress.
        :param relation_type: The relation_type of this RelatedAddress.
        """
        self.openapi_types = {
            'address': str,
            'currency': str,
            'relation_type': str
        }

        self.attribute_map = {
            'address': 'address',
            'currency': 'currency',
            'relation_type': 'relation_type'
        }

        self._address = address
        self._currency = currency
        self._relation_type = relation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelatedAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The related_address of this RelatedAddress.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The RelatedAddress as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'address': self._address,
            'currency': self._currency,
            'relation_type': self._relation_type }


    @property
    def address(self):
        """Gets the address of this RelatedAddress.

        Address

        :return: The address of this RelatedAddress.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this RelatedAddress.

        Address

        :param address: The address of this RelatedAddress.
        :type address: str
        """
        if address is None:
            raise BadUserInputException("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def currency(self):
        """Gets the currency of this RelatedAddress.

        crypto currency code

        :return: The currency of this RelatedAddress.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RelatedAddress.

        crypto currency code

        :param currency: The currency of this RelatedAddress.
        :type currency: str
        """
        if currency is None:
            raise BadUserInputException("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def relation_type(self):
        """Gets the relation_type of this RelatedAddress.

        Type of the related address

        :return: The relation_type of this RelatedAddress.
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """Sets the relation_type of this RelatedAddress.

        Type of the related address

        :param relation_type: The relation_type of this RelatedAddress.
        :type relation_type: str
        """
        allowed_values = ["pubkey", "address", "entity"]  # noqa: E501
        if relation_type not in allowed_values:
            raise BadUserInputException(
                "Invalid value for `relation_type` ({0}), must be one of {1}"
                .format(relation_type, allowed_values)
            )

        self._relation_type = relation_type
