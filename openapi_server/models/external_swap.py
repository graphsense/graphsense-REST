# coding: utf-8
from graphsenselib.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ExternalSwap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_address: str=None, to_address: str=None, from_asset: str=None, to_asset: str=None, from_amount: str=None, to_amount: str=None, from_payment: str=None, to_payment: str=None):
        """ExternalSwap - a model defined in OpenAPI

        :param from_address: The from_address of this ExternalSwap.
        :param to_address: The to_address of this ExternalSwap.
        :param from_asset: The from_asset of this ExternalSwap.
        :param to_asset: The to_asset of this ExternalSwap.
        :param from_amount: The from_amount of this ExternalSwap.
        :param to_amount: The to_amount of this ExternalSwap.
        :param from_payment: The from_payment of this ExternalSwap.
        :param to_payment: The to_payment of this ExternalSwap.
        """
        self.openapi_types = {
            'from_address': str,
            'to_address': str,
            'from_asset': str,
            'to_asset': str,
            'from_amount': str,
            'to_amount': str,
            'from_payment': str,
            'to_payment': str
        }

        self.attribute_map = {
            'from_address': 'from_address',
            'to_address': 'to_address',
            'from_asset': 'from_asset',
            'to_asset': 'to_asset',
            'from_amount': 'from_amount',
            'to_amount': 'to_amount',
            'from_payment': 'from_payment',
            'to_payment': 'to_payment'
        }

        self._from_address = from_address
        self._to_address = to_address
        self._from_asset = from_asset
        self._to_asset = to_asset
        self._from_amount = from_amount
        self._to_amount = to_amount
        self._from_payment = from_payment
        self._to_payment = to_payment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalSwap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The external_swap of this ExternalSwap.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The ExternalSwap as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'from_address': self._from_address,
            'to_address': self._to_address,
            'from_asset': self._from_asset,
            'to_asset': self._to_asset,
            'from_amount': self._from_amount,
            'to_amount': self._to_amount,
            'from_payment': self._from_payment,
            'to_payment': self._to_payment }


    @property
    def from_address(self):
        """Gets the from_address of this ExternalSwap.

        Provider of the input assets of the external swap

        :return: The from_address of this ExternalSwap.
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this ExternalSwap.

        Provider of the input assets of the external swap

        :param from_address: The from_address of this ExternalSwap.
        :type from_address: str
        """
        if from_address is None:
            raise BadUserInputException("Invalid value for `from_address`, must not be `None`")

        self._from_address = from_address

    @property
    def to_address(self):
        """Gets the to_address of this ExternalSwap.

        Receiver of the output assets of the external swap

        :return: The to_address of this ExternalSwap.
        :rtype: str
        """
        return self._to_address

    @to_address.setter
    def to_address(self, to_address):
        """Sets the to_address of this ExternalSwap.

        Receiver of the output assets of the external swap

        :param to_address: The to_address of this ExternalSwap.
        :type to_address: str
        """
        if to_address is None:
            raise BadUserInputException("Invalid value for `to_address`, must not be `None`")

        self._to_address = to_address

    @property
    def from_asset(self):
        """Gets the from_asset of this ExternalSwap.

        Asset swapped from

        :return: The from_asset of this ExternalSwap.
        :rtype: str
        """
        return self._from_asset

    @from_asset.setter
    def from_asset(self, from_asset):
        """Sets the from_asset of this ExternalSwap.

        Asset swapped from

        :param from_asset: The from_asset of this ExternalSwap.
        :type from_asset: str
        """
        if from_asset is None:
            raise BadUserInputException("Invalid value for `from_asset`, must not be `None`")

        self._from_asset = from_asset

    @property
    def to_asset(self):
        """Gets the to_asset of this ExternalSwap.

        Asset swapped to

        :return: The to_asset of this ExternalSwap.
        :rtype: str
        """
        return self._to_asset

    @to_asset.setter
    def to_asset(self, to_asset):
        """Sets the to_asset of this ExternalSwap.

        Asset swapped to

        :param to_asset: The to_asset of this ExternalSwap.
        :type to_asset: str
        """
        if to_asset is None:
            raise BadUserInputException("Invalid value for `to_asset`, must not be `None`")

        self._to_asset = to_asset

    @property
    def from_amount(self):
        """Gets the from_amount of this ExternalSwap.

        Amount of asset swapped from

        :return: The from_amount of this ExternalSwap.
        :rtype: str
        """
        return self._from_amount

    @from_amount.setter
    def from_amount(self, from_amount):
        """Sets the from_amount of this ExternalSwap.

        Amount of asset swapped from

        :param from_amount: The from_amount of this ExternalSwap.
        :type from_amount: str
        """
        if from_amount is None:
            raise BadUserInputException("Invalid value for `from_amount`, must not be `None`")

        self._from_amount = from_amount

    @property
    def to_amount(self):
        """Gets the to_amount of this ExternalSwap.

        Amount of asset swapped to

        :return: The to_amount of this ExternalSwap.
        :rtype: str
        """
        return self._to_amount

    @to_amount.setter
    def to_amount(self, to_amount):
        """Sets the to_amount of this ExternalSwap.

        Amount of asset swapped to

        :param to_amount: The to_amount of this ExternalSwap.
        :type to_amount: str
        """
        if to_amount is None:
            raise BadUserInputException("Invalid value for `to_amount`, must not be `None`")

        self._to_amount = to_amount

    @property
    def from_payment(self):
        """Gets the from_payment of this ExternalSwap.

        Log or trace information about input transfer

        :return: The from_payment of this ExternalSwap.
        :rtype: str
        """
        return self._from_payment

    @from_payment.setter
    def from_payment(self, from_payment):
        """Sets the from_payment of this ExternalSwap.

        Log or trace information about input transfer

        :param from_payment: The from_payment of this ExternalSwap.
        :type from_payment: str
        """
        if from_payment is None:
            raise BadUserInputException("Invalid value for `from_payment`, must not be `None`")

        self._from_payment = from_payment

    @property
    def to_payment(self):
        """Gets the to_payment of this ExternalSwap.

        Log or trace information about output transfer

        :return: The to_payment of this ExternalSwap.
        :rtype: str
        """
        return self._to_payment

    @to_payment.setter
    def to_payment(self, to_payment):
        """Sets the to_payment of this ExternalSwap.

        Log or trace information about output transfer

        :param to_payment: The to_payment of this ExternalSwap.
        :type to_payment: str
        """
        if to_payment is None:
            raise BadUserInputException("Invalid value for `to_payment`, must not be `None`")

        self._to_payment = to_payment
