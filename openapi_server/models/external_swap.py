# coding: utf-8
from gsrest.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ExternalSwap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, swapper: str=None, from_amount: str=None, to_amount: str=None, from_token: str=None, to_token: str=None, version: str=None, swap_log: str=None):
        """ExternalSwap - a model defined in OpenAPI

        :param swapper: The swapper of this ExternalSwap.
        :param from_amount: The from_amount of this ExternalSwap.
        :param to_amount: The to_amount of this ExternalSwap.
        :param from_token: The from_token of this ExternalSwap.
        :param to_token: The to_token of this ExternalSwap.
        :param version: The version of this ExternalSwap.
        :param swap_log: The swap_log of this ExternalSwap.
        """
        self.openapi_types = {
            'swapper': str,
            'from_amount': str,
            'to_amount': str,
            'from_token': str,
            'to_token': str,
            'version': str,
            'swap_log': str
        }

        self.attribute_map = {
            'swapper': 'swapper',
            'from_amount': 'from_amount',
            'to_amount': 'to_amount',
            'from_token': 'from_token',
            'to_token': 'to_token',
            'version': 'version',
            'swap_log': 'swap_log'
        }

        self._swapper = swapper
        self._from_amount = from_amount
        self._to_amount = to_amount
        self._from_token = from_token
        self._to_token = to_token
        self._version = version
        self._swap_log = swap_log

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalSwap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The external_swap of this ExternalSwap.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The ExternalSwap as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'swapper': self._swapper,
            'from_amount': self._from_amount,
            'to_amount': self._to_amount,
            'from_token': self._from_token,
            'to_token': self._to_token,
            'version': self._version,
            'swap_log': self._swap_log }


    @property
    def swapper(self):
        """Gets the swapper of this ExternalSwap.

        Address of the swapper

        :return: The swapper of this ExternalSwap.
        :rtype: str
        """
        return self._swapper

    @swapper.setter
    def swapper(self, swapper):
        """Sets the swapper of this ExternalSwap.

        Address of the swapper

        :param swapper: The swapper of this ExternalSwap.
        :type swapper: str
        """
        if swapper is None:
            raise BadUserInputException("Invalid value for `swapper`, must not be `None`")

        self._swapper = swapper

    @property
    def from_amount(self):
        """Gets the from_amount of this ExternalSwap.

        Amount of tokens swapped from

        :return: The from_amount of this ExternalSwap.
        :rtype: str
        """
        return self._from_amount

    @from_amount.setter
    def from_amount(self, from_amount):
        """Sets the from_amount of this ExternalSwap.

        Amount of tokens swapped from

        :param from_amount: The from_amount of this ExternalSwap.
        :type from_amount: str
        """
        if from_amount is None:
            raise BadUserInputException("Invalid value for `from_amount`, must not be `None`")

        self._from_amount = from_amount

    @property
    def to_amount(self):
        """Gets the to_amount of this ExternalSwap.

        Amount of tokens swapped to

        :return: The to_amount of this ExternalSwap.
        :rtype: str
        """
        return self._to_amount

    @to_amount.setter
    def to_amount(self, to_amount):
        """Sets the to_amount of this ExternalSwap.

        Amount of tokens swapped to

        :param to_amount: The to_amount of this ExternalSwap.
        :type to_amount: str
        """
        if to_amount is None:
            raise BadUserInputException("Invalid value for `to_amount`, must not be `None`")

        self._to_amount = to_amount

    @property
    def from_token(self):
        """Gets the from_token of this ExternalSwap.

        Address of the token swapped from

        :return: The from_token of this ExternalSwap.
        :rtype: str
        """
        return self._from_token

    @from_token.setter
    def from_token(self, from_token):
        """Sets the from_token of this ExternalSwap.

        Address of the token swapped from

        :param from_token: The from_token of this ExternalSwap.
        :type from_token: str
        """
        if from_token is None:
            raise BadUserInputException("Invalid value for `from_token`, must not be `None`")

        self._from_token = from_token

    @property
    def to_token(self):
        """Gets the to_token of this ExternalSwap.

        Address of the token swapped to

        :return: The to_token of this ExternalSwap.
        :rtype: str
        """
        return self._to_token

    @to_token.setter
    def to_token(self, to_token):
        """Sets the to_token of this ExternalSwap.

        Address of the token swapped to

        :param to_token: The to_token of this ExternalSwap.
        :type to_token: str
        """

        self._to_token = to_token

    @property
    def version(self):
        """Gets the version of this ExternalSwap.

        Version information

        :return: The version of this ExternalSwap.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ExternalSwap.

        Version information

        :param version: The version of this ExternalSwap.
        :type version: str
        """
        if version is None:
            raise BadUserInputException("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def swap_log(self):
        """Gets the swap_log of this ExternalSwap.

        Log information about the swap

        :return: The swap_log of this ExternalSwap.
        :rtype: str
        """
        return self._swap_log

    @swap_log.setter
    def swap_log(self, swap_log):
        """Sets the swap_log of this ExternalSwap.

        Log information about the swap

        :param swap_log: The swap_log of this ExternalSwap.
        :type swap_log: str
        """
        if swap_log is None:
            raise BadUserInputException("Invalid value for `swap_log`, must not be `None`")

        self._swap_log = swap_log
