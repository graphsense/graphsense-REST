# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.currency import Currency
from openapi_server import util

from openapi_server.models.currency import Currency  # noqa: E501

class StatsCurrencies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, btc=None, bch=None, ltc=None, zec=None):  # noqa: E501
        """StatsCurrencies - a model defined in OpenAPI

        :param btc: The btc of this StatsCurrencies.  # noqa: E501
        :type btc: Currency
        :param bch: The bch of this StatsCurrencies.  # noqa: E501
        :type bch: Currency
        :param ltc: The ltc of this StatsCurrencies.  # noqa: E501
        :type ltc: Currency
        :param zec: The zec of this StatsCurrencies.  # noqa: E501
        :type zec: Currency
        """
        self.openapi_types = {
            'btc': Currency,
            'bch': Currency,
            'ltc': Currency,
            'zec': Currency
        }

        self.attribute_map = {
            'btc': 'btc',
            'bch': 'bch',
            'ltc': 'ltc',
            'zec': 'zec'
        }

        self._btc = btc
        self._bch = bch
        self._ltc = ltc
        self._zec = zec

    @classmethod
    def from_dict(cls, dikt) -> 'StatsCurrencies':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The stats_currencies of this StatsCurrencies.  # noqa: E501
        :rtype: StatsCurrencies
        """
        return util.deserialize_model(dikt, cls)

    @property
    def btc(self):
        """Gets the btc of this StatsCurrencies.


        :return: The btc of this StatsCurrencies.
        :rtype: Currency
        """
        return self._btc

    @btc.setter
    def btc(self, btc):
        """Sets the btc of this StatsCurrencies.


        :param btc: The btc of this StatsCurrencies.
        :type btc: Currency
        """

        self._btc = btc

    @property
    def bch(self):
        """Gets the bch of this StatsCurrencies.


        :return: The bch of this StatsCurrencies.
        :rtype: Currency
        """
        return self._bch

    @bch.setter
    def bch(self, bch):
        """Sets the bch of this StatsCurrencies.


        :param bch: The bch of this StatsCurrencies.
        :type bch: Currency
        """

        self._bch = bch

    @property
    def ltc(self):
        """Gets the ltc of this StatsCurrencies.


        :return: The ltc of this StatsCurrencies.
        :rtype: Currency
        """
        return self._ltc

    @ltc.setter
    def ltc(self, ltc):
        """Sets the ltc of this StatsCurrencies.


        :param ltc: The ltc of this StatsCurrencies.
        :type ltc: Currency
        """

        self._ltc = ltc

    @property
    def zec(self):
        """Gets the zec of this StatsCurrencies.


        :return: The zec of this StatsCurrencies.
        :rtype: Currency
        """
        return self._zec

    @zec.setter
    def zec(self, zec):
        """Sets the zec of this StatsCurrencies.


        :param zec: The zec of this StatsCurrencies.
        :type zec: Currency
        """

        self._zec = zec
