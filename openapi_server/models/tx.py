# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.tx_account import TxAccount
from openapi_server.models.tx_utxo import TxUtxo
from openapi_server.models.tx_value import TxValue
from openapi_server.models.values import Values
from openapi_server import util

from openapi_server.models.tx_account import TxAccount  # noqa: E501
from openapi_server.models.tx_utxo import TxUtxo  # noqa: E501
from openapi_server.models.tx_value import TxValue  # noqa: E501
from openapi_server.models.values import Values  # noqa: E501

class Tx(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_type='account', tx_hash=None, coinbase=None, height=None, inputs=None, outputs=None, timestamp=None, total_input=None, total_output=None, values=None):  # noqa: E501
        """Tx - a model defined in OpenAPI

        :param currency_type: The currency_type of this Tx.  # noqa: E501
        :type currency_type: str
        :param tx_hash: The tx_hash of this Tx.  # noqa: E501
        :type tx_hash: str
        :param coinbase: The coinbase of this Tx.  # noqa: E501
        :type coinbase: bool
        :param height: The height of this Tx.  # noqa: E501
        :type height: int
        :param inputs: The inputs of this Tx.  # noqa: E501
        :type inputs: List[TxValue]
        :param outputs: The outputs of this Tx.  # noqa: E501
        :type outputs: List[TxValue]
        :param timestamp: The timestamp of this Tx.  # noqa: E501
        :type timestamp: int
        :param total_input: The total_input of this Tx.  # noqa: E501
        :type total_input: Values
        :param total_output: The total_output of this Tx.  # noqa: E501
        :type total_output: Values
        :param values: The values of this Tx.  # noqa: E501
        :type values: Values
        """
        self.openapi_types = {
            'currency_type': str,
            'tx_hash': str,
            'coinbase': bool,
            'height': int,
            'inputs': List[TxValue],
            'outputs': List[TxValue],
            'timestamp': int,
            'total_input': Values,
            'total_output': Values,
            'values': Values
        }

        self.attribute_map = {
            'currency_type': 'currency_type',
            'tx_hash': 'tx_hash',
            'coinbase': 'coinbase',
            'height': 'height',
            'inputs': 'inputs',
            'outputs': 'outputs',
            'timestamp': 'timestamp',
            'total_input': 'total_input',
            'total_output': 'total_output',
            'values': 'values'
        }

        if currency_type is None:
            raise ValueError("Invalid value for `currency_type`, must not be `None`")  # noqa: E501
        self._currency_type = currency_type
        if tx_hash is None:
            raise ValueError("Invalid value for `tx_hash`, must not be `None`")  # noqa: E501
        self._tx_hash = tx_hash
        if coinbase is None:
            raise ValueError("Invalid value for `coinbase`, must not be `None`")  # noqa: E501
        self._coinbase = coinbase
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501
        self._height = height
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501
        self._inputs = inputs
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")  # noqa: E501
        self._outputs = outputs
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501
        self._timestamp = timestamp
        if total_input is None:
            raise ValueError("Invalid value for `total_input`, must not be `None`")  # noqa: E501
        self._total_input = total_input
        if total_output is None:
            raise ValueError("Invalid value for `total_output`, must not be `None`")  # noqa: E501
        self._total_output = total_output
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'Tx':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tx of this Tx.  # noqa: E501
        :rtype: Tx
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The Tx as a dict
        :rtype: dict
        """
        return { 'currency_type': self._currency_type,
            'tx_hash': self._tx_hash,
            'coinbase': self._coinbase,
            'height': self._height,
            'inputs': self._inputs,
            'outputs': self._outputs,
            'timestamp': self._timestamp,
            'total_input': self._total_input,
            'total_output': self._total_output,
            'values': self._values }


    @property
    def currency_type(self):
        """Gets the currency_type of this Tx.


        :return: The currency_type of this Tx.
        :rtype: str
        """
        return self._currency_type

    @currency_type.setter
    def currency_type(self, currency_type):
        """Sets the currency_type of this Tx.


        :param currency_type: The currency_type of this Tx.
        :type currency_type: str
        """
        if currency_type is None:
            raise ValueError("Invalid value for `currency_type`, must not be `None`")  # noqa: E501

        self._currency_type = currency_type

    @property
    def tx_hash(self):
        """Gets the tx_hash of this Tx.

        Transaction hash  # noqa: E501

        :return: The tx_hash of this Tx.
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this Tx.

        Transaction hash  # noqa: E501

        :param tx_hash: The tx_hash of this Tx.
        :type tx_hash: str
        """
        if tx_hash is None:
            raise ValueError("Invalid value for `tx_hash`, must not be `None`")  # noqa: E501

        self._tx_hash = tx_hash

    @property
    def coinbase(self):
        """Gets the coinbase of this Tx.

        Coinbase transaction flag  # noqa: E501

        :return: The coinbase of this Tx.
        :rtype: bool
        """
        return self._coinbase

    @coinbase.setter
    def coinbase(self, coinbase):
        """Sets the coinbase of this Tx.

        Coinbase transaction flag  # noqa: E501

        :param coinbase: The coinbase of this Tx.
        :type coinbase: bool
        """
        if coinbase is None:
            raise ValueError("Invalid value for `coinbase`, must not be `None`")  # noqa: E501

        self._coinbase = coinbase

    @property
    def height(self):
        """Gets the height of this Tx.

        Height  # noqa: E501

        :return: The height of this Tx.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Tx.

        Height  # noqa: E501

        :param height: The height of this Tx.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501
        if height is not None and height < 1:  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `1`")  # noqa: E501

        self._height = height

    @property
    def inputs(self):
        """Gets the inputs of this Tx.

        Transaction inputs/outputs  # noqa: E501

        :return: The inputs of this Tx.
        :rtype: List[TxValue]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this Tx.

        Transaction inputs/outputs  # noqa: E501

        :param inputs: The inputs of this Tx.
        :type inputs: List[TxValue]
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this Tx.

        Transaction inputs/outputs  # noqa: E501

        :return: The outputs of this Tx.
        :rtype: List[TxValue]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this Tx.

        Transaction inputs/outputs  # noqa: E501

        :param outputs: The outputs of this Tx.
        :type outputs: List[TxValue]
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")  # noqa: E501

        self._outputs = outputs

    @property
    def timestamp(self):
        """Gets the timestamp of this Tx.

        Timestamp  # noqa: E501

        :return: The timestamp of this Tx.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Tx.

        Timestamp  # noqa: E501

        :param timestamp: The timestamp of this Tx.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def total_input(self):
        """Gets the total_input of this Tx.


        :return: The total_input of this Tx.
        :rtype: Values
        """
        return self._total_input

    @total_input.setter
    def total_input(self, total_input):
        """Sets the total_input of this Tx.


        :param total_input: The total_input of this Tx.
        :type total_input: Values
        """
        if total_input is None:
            raise ValueError("Invalid value for `total_input`, must not be `None`")  # noqa: E501

        self._total_input = total_input

    @property
    def total_output(self):
        """Gets the total_output of this Tx.


        :return: The total_output of this Tx.
        :rtype: Values
        """
        return self._total_output

    @total_output.setter
    def total_output(self, total_output):
        """Sets the total_output of this Tx.


        :param total_output: The total_output of this Tx.
        :type total_output: Values
        """
        if total_output is None:
            raise ValueError("Invalid value for `total_output`, must not be `None`")  # noqa: E501

        self._total_output = total_output

    @property
    def values(self):
        """Gets the values of this Tx.


        :return: The values of this Tx.
        :rtype: Values
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Tx.


        :param values: The values of this Tx.
        :type values: Values
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values
