# coding: utf-8
from graphsenselib.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.address_tx_utxo import AddressTxUtxo
from openapi_server.models.tx_account import TxAccount
from openapi_server.models.values import Values
from openapi_server import util


class AddressTx(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tx_type: str='account', tx_hash: str=None, currency: str=None, coinbase: bool=None, height: int=None, timestamp: int=None, value: Values=None, identifier: str=None, token_tx_id: int=None, network: str=None, from_address: str=None, to_address: str=None, contract_creation: bool=None, is_external: bool=None):
        """AddressTx - a model defined in OpenAPI

        :param tx_type: The tx_type of this AddressTx.
        :param tx_hash: The tx_hash of this AddressTx.
        :param currency: The currency of this AddressTx.
        :param coinbase: The coinbase of this AddressTx.
        :param height: The height of this AddressTx.
        :param timestamp: The timestamp of this AddressTx.
        :param value: The value of this AddressTx.
        :param identifier: The identifier of this AddressTx.
        :param token_tx_id: The token_tx_id of this AddressTx.
        :param network: The network of this AddressTx.
        :param from_address: The from_address of this AddressTx.
        :param to_address: The to_address of this AddressTx.
        :param contract_creation: The contract_creation of this AddressTx.
        :param is_external: The is_external of this AddressTx.
        """
        self.openapi_types = {
            'tx_type': str,
            'tx_hash': str,
            'currency': str,
            'coinbase': bool,
            'height': int,
            'timestamp': int,
            'value': Values,
            'identifier': str,
            'token_tx_id': int,
            'network': str,
            'from_address': str,
            'to_address': str,
            'contract_creation': bool,
            'is_external': bool
        }

        self.attribute_map = {
            'tx_type': 'tx_type',
            'tx_hash': 'tx_hash',
            'currency': 'currency',
            'coinbase': 'coinbase',
            'height': 'height',
            'timestamp': 'timestamp',
            'value': 'value',
            'identifier': 'identifier',
            'token_tx_id': 'token_tx_id',
            'network': 'network',
            'from_address': 'from_address',
            'to_address': 'to_address',
            'contract_creation': 'contract_creation',
            'is_external': 'is_external'
        }

        self._tx_type = tx_type
        self._tx_hash = tx_hash
        self._currency = currency
        self._coinbase = coinbase
        self._height = height
        self._timestamp = timestamp
        self._value = value
        self._identifier = identifier
        self._token_tx_id = token_tx_id
        self._network = network
        self._from_address = from_address
        self._to_address = to_address
        self._contract_creation = contract_creation
        self._is_external = is_external

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressTx':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The address_tx of this AddressTx.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The AddressTx as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'tx_type': self._tx_type,
            'tx_hash': self._tx_hash,
            'currency': self._currency,
            'coinbase': self._coinbase,
            'height': self._height,
            'timestamp': self._timestamp,
            'value': self._value,
            'identifier': self._identifier,
            'token_tx_id': self._token_tx_id,
            'network': self._network,
            'from_address': self._from_address,
            'to_address': self._to_address,
            'contract_creation': self._contract_creation,
            'is_external': self._is_external }


    @property
    def tx_type(self):
        """Gets the tx_type of this AddressTx.


        :return: The tx_type of this AddressTx.
        :rtype: str
        """
        return self._tx_type

    @tx_type.setter
    def tx_type(self, tx_type):
        """Sets the tx_type of this AddressTx.


        :param tx_type: The tx_type of this AddressTx.
        :type tx_type: str
        """
        if tx_type is None:
            raise BadUserInputException("Invalid value for `tx_type`, must not be `None`")

        self._tx_type = tx_type

    @property
    def tx_hash(self):
        """Gets the tx_hash of this AddressTx.

        Transaction hash

        :return: The tx_hash of this AddressTx.
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this AddressTx.

        Transaction hash

        :param tx_hash: The tx_hash of this AddressTx.
        :type tx_hash: str
        """
        if tx_hash is None:
            raise BadUserInputException("Invalid value for `tx_hash`, must not be `None`")

        self._tx_hash = tx_hash

    @property
    def currency(self):
        """Gets the currency of this AddressTx.

        crypto currency code

        :return: The currency of this AddressTx.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AddressTx.

        crypto currency code

        :param currency: The currency of this AddressTx.
        :type currency: str
        """
        if currency is None:
            raise BadUserInputException("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def coinbase(self):
        """Gets the coinbase of this AddressTx.

        Coinbase transaction flag

        :return: The coinbase of this AddressTx.
        :rtype: bool
        """
        return self._coinbase

    @coinbase.setter
    def coinbase(self, coinbase):
        """Sets the coinbase of this AddressTx.

        Coinbase transaction flag

        :param coinbase: The coinbase of this AddressTx.
        :type coinbase: bool
        """
        if coinbase is None:
            raise BadUserInputException("Invalid value for `coinbase`, must not be `None`")

        self._coinbase = coinbase

    @property
    def height(self):
        """Gets the height of this AddressTx.

        Height

        :return: The height of this AddressTx.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this AddressTx.

        Height

        :param height: The height of this AddressTx.
        :type height: int
        """
        if height is None:
            raise BadUserInputException("Invalid value for `height`, must not be `None`")
        if height is not None and height < 0:
            raise BadUserInputException("Invalid value for `height`, must be a value greater than or equal to `0`")

        self._height = height

    @property
    def timestamp(self):
        """Gets the timestamp of this AddressTx.

        Timestamp in posix seconds format

        :return: The timestamp of this AddressTx.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AddressTx.

        Timestamp in posix seconds format

        :param timestamp: The timestamp of this AddressTx.
        :type timestamp: int
        """
        if timestamp is None:
            raise BadUserInputException("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def value(self):
        """Gets the value of this AddressTx.


        :return: The value of this AddressTx.
        :rtype: Values
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AddressTx.


        :param value: The value of this AddressTx.
        :type value: Values
        """
        if value is None:
            raise BadUserInputException("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def identifier(self):
        """Gets the identifier of this AddressTx.

        uniquely identifies a transaction or a sub transaction like a token transaction or trace.

        :return: The identifier of this AddressTx.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this AddressTx.

        uniquely identifies a transaction or a sub transaction like a token transaction or trace.

        :param identifier: The identifier of this AddressTx.
        :type identifier: str
        """
        if identifier is None:
            raise BadUserInputException("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def token_tx_id(self):
        """Gets the token_tx_id of this AddressTx.

        identifies a specific token transaction within a tx_hash, (deprecated) use identifier instead in encapsulates all information that uniquely identifies the transaction

        :return: The token_tx_id of this AddressTx.
        :rtype: int
        """
        return self._token_tx_id

    @token_tx_id.setter
    def token_tx_id(self, token_tx_id):
        """Sets the token_tx_id of this AddressTx.

        identifies a specific token transaction within a tx_hash, (deprecated) use identifier instead in encapsulates all information that uniquely identifies the transaction

        :param token_tx_id: The token_tx_id of this AddressTx.
        :type token_tx_id: int
        """

        self._token_tx_id = token_tx_id

    @property
    def network(self):
        """Gets the network of this AddressTx.

        crypto currency code

        :return: The network of this AddressTx.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this AddressTx.

        crypto currency code

        :param network: The network of this AddressTx.
        :type network: str
        """
        if network is None:
            raise BadUserInputException("Invalid value for `network`, must not be `None`")

        self._network = network

    @property
    def from_address(self):
        """Gets the from_address of this AddressTx.

        Address

        :return: The from_address of this AddressTx.
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this AddressTx.

        Address

        :param from_address: The from_address of this AddressTx.
        :type from_address: str
        """
        if from_address is None:
            raise BadUserInputException("Invalid value for `from_address`, must not be `None`")

        self._from_address = from_address

    @property
    def to_address(self):
        """Gets the to_address of this AddressTx.

        Address

        :return: The to_address of this AddressTx.
        :rtype: str
        """
        return self._to_address

    @to_address.setter
    def to_address(self, to_address):
        """Sets the to_address of this AddressTx.

        Address

        :param to_address: The to_address of this AddressTx.
        :type to_address: str
        """
        if to_address is None:
            raise BadUserInputException("Invalid value for `to_address`, must not be `None`")

        self._to_address = to_address

    @property
    def contract_creation(self):
        """Gets the contract_creation of this AddressTx.

        Indicates if this transaction created a new contract. Recipient address is the address of the new contract.

        :return: The contract_creation of this AddressTx.
        :rtype: bool
        """
        return self._contract_creation

    @contract_creation.setter
    def contract_creation(self, contract_creation):
        """Sets the contract_creation of this AddressTx.

        Indicates if this transaction created a new contract. Recipient address is the address of the new contract.

        :param contract_creation: The contract_creation of this AddressTx.
        :type contract_creation: bool
        """

        self._contract_creation = contract_creation

    @property
    def is_external(self):
        """Gets the is_external of this AddressTx.

        Indicates if this transaction is an external transaction for an eth like currency.

        :return: The is_external of this AddressTx.
        :rtype: bool
        """
        return self._is_external

    @is_external.setter
    def is_external(self, is_external):
        """Sets the is_external of this AddressTx.

        Indicates if this transaction is an external transaction for an eth like currency.

        :param is_external: The is_external of this AddressTx.
        :type is_external: bool
        """

        self._is_external = is_external
