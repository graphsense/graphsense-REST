# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.address_tx_utxo import AddressTxUtxo
from openapi_server.models.tx_account import TxAccount
from openapi_server.models.values import Values
from openapi_server import util

from openapi_server.models.address_tx_utxo import AddressTxUtxo  # noqa: E501
from openapi_server.models.tx_account import TxAccount  # noqa: E501
from openapi_server.models.values import Values  # noqa: E501

class AddressTx(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_type='account', height=None, timestamp=None, tx_hash=None, value=None, values=None):  # noqa: E501
        """AddressTx - a model defined in OpenAPI

        :param currency_type: The currency_type of this AddressTx.  # noqa: E501
        :type currency_type: str
        :param height: The height of this AddressTx.  # noqa: E501
        :type height: int
        :param timestamp: The timestamp of this AddressTx.  # noqa: E501
        :type timestamp: int
        :param tx_hash: The tx_hash of this AddressTx.  # noqa: E501
        :type tx_hash: str
        :param value: The value of this AddressTx.  # noqa: E501
        :type value: Values
        :param values: The values of this AddressTx.  # noqa: E501
        :type values: Values
        """
        self.openapi_types = {
            'currency_type': str,
            'height': int,
            'timestamp': int,
            'tx_hash': str,
            'value': Values,
            'values': Values
        }

        self.attribute_map = {
            'currency_type': 'currency_type',
            'height': 'height',
            'timestamp': 'timestamp',
            'tx_hash': 'tx_hash',
            'value': 'value',
            'values': 'values'
        }

        if currency_type is None:
            raise ValueError("Invalid value for `currency_type`, must not be `None`")  # noqa: E501
        self._currency_type = currency_type
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501
        self._height = height
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501
        self._timestamp = timestamp
        if tx_hash is None:
            raise ValueError("Invalid value for `tx_hash`, must not be `None`")  # noqa: E501
        self._tx_hash = tx_hash
        self._value = value
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'AddressTx':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The address_tx of this AddressTx.  # noqa: E501
        :rtype: AddressTx
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The AddressTx as a dict
        :rtype: dict
        """
        return { 'currency_type': self._currency_type,
            'height': self._height,
            'timestamp': self._timestamp,
            'tx_hash': self._tx_hash,
            'value': self._value,
            'values': self._values }


    @property
    def currency_type(self):
        """Gets the currency_type of this AddressTx.


        :return: The currency_type of this AddressTx.
        :rtype: str
        """
        return self._currency_type

    @currency_type.setter
    def currency_type(self, currency_type):
        """Sets the currency_type of this AddressTx.


        :param currency_type: The currency_type of this AddressTx.
        :type currency_type: str
        """
        if currency_type is None:
            raise ValueError("Invalid value for `currency_type`, must not be `None`")  # noqa: E501

        self._currency_type = currency_type

    @property
    def height(self):
        """Gets the height of this AddressTx.

        Height  # noqa: E501

        :return: The height of this AddressTx.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this AddressTx.

        Height  # noqa: E501

        :param height: The height of this AddressTx.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501
        if height is not None and height < 1:  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than or equal to `1`")  # noqa: E501

        self._height = height

    @property
    def timestamp(self):
        """Gets the timestamp of this AddressTx.

        Timestamp  # noqa: E501

        :return: The timestamp of this AddressTx.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AddressTx.

        Timestamp  # noqa: E501

        :param timestamp: The timestamp of this AddressTx.
        :type timestamp: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def tx_hash(self):
        """Gets the tx_hash of this AddressTx.

        Transaction hash  # noqa: E501

        :return: The tx_hash of this AddressTx.
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash):
        """Sets the tx_hash of this AddressTx.

        Transaction hash  # noqa: E501

        :param tx_hash: The tx_hash of this AddressTx.
        :type tx_hash: str
        """
        if tx_hash is None:
            raise ValueError("Invalid value for `tx_hash`, must not be `None`")  # noqa: E501

        self._tx_hash = tx_hash

    @property
    def value(self):
        """Gets the value of this AddressTx.


        :return: The value of this AddressTx.
        :rtype: Values
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AddressTx.


        :param value: The value of this AddressTx.
        :type value: Values
        """

        self._value = value

    @property
    def values(self):
        """Gets the values of this AddressTx.


        :return: The values of this AddressTx.
        :rtype: Values
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AddressTx.


        :param values: The values of this AddressTx.
        :type values: Values
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values
