# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.entity_tag import EntityTag
from openapi_server import util

from openapi_server.models.entity_tag import EntityTag  # noqa: E501

class TagsByEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_tags=None, entity_tags=None, tag_coherence=None):  # noqa: E501
        """TagsByEntity - a model defined in OpenAPI

        :param address_tags: The address_tags of this TagsByEntity.  # noqa: E501
        :type address_tags: List[EntityTag]
        :param entity_tags: The entity_tags of this TagsByEntity.  # noqa: E501
        :type entity_tags: List[EntityTag]
        :param tag_coherence: The tag_coherence of this TagsByEntity.  # noqa: E501
        :type tag_coherence: float
        """
        self.openapi_types = {
            'address_tags': List[EntityTag],
            'entity_tags': List[EntityTag],
            'tag_coherence': float
        }

        self.attribute_map = {
            'address_tags': 'address_tags',
            'entity_tags': 'entity_tags',
            'tag_coherence': 'tag_coherence'
        }

        if address_tags is None:
            raise ValueError("Invalid value for `address_tags`, must not be `None`")  # noqa: E501
        self._address_tags = address_tags
        if entity_tags is None:
            raise ValueError("Invalid value for `entity_tags`, must not be `None`")  # noqa: E501
        self._entity_tags = entity_tags
        self._tag_coherence = tag_coherence

    @classmethod
    def from_dict(cls, dikt) -> 'TagsByEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tags_by_entity of this TagsByEntity.  # noqa: E501
        :rtype: TagsByEntity
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The TagsByEntity as a dict
        :rtype: dict
        """
        return { 'address_tags': self._address_tags,
            'entity_tags': self._entity_tags,
            'tag_coherence': self._tag_coherence }


    @property
    def address_tags(self):
        """Gets the address_tags of this TagsByEntity.

        Aggregated tags of contained addresses  # noqa: E501

        :return: The address_tags of this TagsByEntity.
        :rtype: List[EntityTag]
        """
        return self._address_tags

    @address_tags.setter
    def address_tags(self, address_tags):
        """Sets the address_tags of this TagsByEntity.

        Aggregated tags of contained addresses  # noqa: E501

        :param address_tags: The address_tags of this TagsByEntity.
        :type address_tags: List[EntityTag]
        """
        if address_tags is None:
            raise ValueError("Invalid value for `address_tags`, must not be `None`")  # noqa: E501

        self._address_tags = address_tags

    @property
    def entity_tags(self):
        """Gets the entity_tags of this TagsByEntity.

        Tags of this entity  # noqa: E501

        :return: The entity_tags of this TagsByEntity.
        :rtype: List[EntityTag]
        """
        return self._entity_tags

    @entity_tags.setter
    def entity_tags(self, entity_tags):
        """Sets the entity_tags of this TagsByEntity.

        Tags of this entity  # noqa: E501

        :param entity_tags: The entity_tags of this TagsByEntity.
        :type entity_tags: List[EntityTag]
        """
        if entity_tags is None:
            raise ValueError("Invalid value for `entity_tags`, must not be `None`")  # noqa: E501

        self._entity_tags = entity_tags

    @property
    def tag_coherence(self):
        """Gets the tag_coherence of this TagsByEntity.

        Tag coherence  # noqa: E501

        :return: The tag_coherence of this TagsByEntity.
        :rtype: float
        """
        return self._tag_coherence

    @tag_coherence.setter
    def tag_coherence(self, tag_coherence):
        """Sets the tag_coherence of this TagsByEntity.

        Tag coherence  # noqa: E501

        :param tag_coherence: The tag_coherence of this TagsByEntity.
        :type tag_coherence: float
        """

        self._tag_coherence = tag_coherence
