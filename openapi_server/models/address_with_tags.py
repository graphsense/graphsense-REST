# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.address import Address
from openapi_server.models.address_with_tags_all_of import AddressWithTagsAllOf
from openapi_server.models.tag import Tag
from openapi_server.models.tx_summary import TxSummary
from openapi_server.models.values import Values
from openapi_server import util

from openapi_server.models.address import Address  # noqa: E501
from openapi_server.models.address_with_tags_all_of import AddressWithTagsAllOf  # noqa: E501
from openapi_server.models.tag import Tag  # noqa: E501
from openapi_server.models.tx_summary import TxSummary  # noqa: E501
from openapi_server.models.values import Values  # noqa: E501

class AddressWithTags(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address=None, balance=None, first_tx=None, last_tx=None, in_degree=None, out_degree=None, no_incoming_txs=None, no_outgoing_txs=None, total_received=None, total_spent=None, tags=None):  # noqa: E501
        """AddressWithTags - a model defined in OpenAPI

        :param address: The address of this AddressWithTags.  # noqa: E501
        :type address: str
        :param balance: The balance of this AddressWithTags.  # noqa: E501
        :type balance: Values
        :param first_tx: The first_tx of this AddressWithTags.  # noqa: E501
        :type first_tx: TxSummary
        :param last_tx: The last_tx of this AddressWithTags.  # noqa: E501
        :type last_tx: TxSummary
        :param in_degree: The in_degree of this AddressWithTags.  # noqa: E501
        :type in_degree: int
        :param out_degree: The out_degree of this AddressWithTags.  # noqa: E501
        :type out_degree: int
        :param no_incoming_txs: The no_incoming_txs of this AddressWithTags.  # noqa: E501
        :type no_incoming_txs: int
        :param no_outgoing_txs: The no_outgoing_txs of this AddressWithTags.  # noqa: E501
        :type no_outgoing_txs: int
        :param total_received: The total_received of this AddressWithTags.  # noqa: E501
        :type total_received: Values
        :param total_spent: The total_spent of this AddressWithTags.  # noqa: E501
        :type total_spent: Values
        :param tags: The tags of this AddressWithTags.  # noqa: E501
        :type tags: List[Tag]
        """
        self.openapi_types = {
            'address': str,
            'balance': Values,
            'first_tx': TxSummary,
            'last_tx': TxSummary,
            'in_degree': int,
            'out_degree': int,
            'no_incoming_txs': int,
            'no_outgoing_txs': int,
            'total_received': Values,
            'total_spent': Values,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'address': 'address',
            'balance': 'balance',
            'first_tx': 'first_tx',
            'last_tx': 'last_tx',
            'in_degree': 'in_degree',
            'out_degree': 'out_degree',
            'no_incoming_txs': 'no_incoming_txs',
            'no_outgoing_txs': 'no_outgoing_txs',
            'total_received': 'total_received',
            'total_spent': 'total_spent',
            'tags': 'tags'
        }

        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        self._address = address
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501
        self._balance = balance
        if first_tx is None:
            raise ValueError("Invalid value for `first_tx`, must not be `None`")  # noqa: E501
        self._first_tx = first_tx
        if last_tx is None:
            raise ValueError("Invalid value for `last_tx`, must not be `None`")  # noqa: E501
        self._last_tx = last_tx
        if in_degree is None:
            raise ValueError("Invalid value for `in_degree`, must not be `None`")  # noqa: E501
        self._in_degree = in_degree
        if out_degree is None:
            raise ValueError("Invalid value for `out_degree`, must not be `None`")  # noqa: E501
        self._out_degree = out_degree
        if no_incoming_txs is None:
            raise ValueError("Invalid value for `no_incoming_txs`, must not be `None`")  # noqa: E501
        self._no_incoming_txs = no_incoming_txs
        if no_outgoing_txs is None:
            raise ValueError("Invalid value for `no_outgoing_txs`, must not be `None`")  # noqa: E501
        self._no_outgoing_txs = no_outgoing_txs
        if total_received is None:
            raise ValueError("Invalid value for `total_received`, must not be `None`")  # noqa: E501
        self._total_received = total_received
        if total_spent is None:
            raise ValueError("Invalid value for `total_spent`, must not be `None`")  # noqa: E501
        self._total_spent = total_spent
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'AddressWithTags':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The address_with_tags of this AddressWithTags.  # noqa: E501
        :rtype: AddressWithTags
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The AddressWithTags as a dict
        :rtype: dict
        """
        return { 'address': self._address,
            'balance': self._balance,
            'first_tx': self._first_tx,
            'last_tx': self._last_tx,
            'in_degree': self._in_degree,
            'out_degree': self._out_degree,
            'no_incoming_txs': self._no_incoming_txs,
            'no_outgoing_txs': self._no_outgoing_txs,
            'total_received': self._total_received,
            'total_spent': self._total_spent,
            'tags': self._tags }


    @property
    def address(self):
        """Gets the address of this AddressWithTags.

        Address  # noqa: E501

        :return: The address of this AddressWithTags.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AddressWithTags.

        Address  # noqa: E501

        :param address: The address of this AddressWithTags.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def balance(self):
        """Gets the balance of this AddressWithTags.


        :return: The balance of this AddressWithTags.
        :rtype: Values
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AddressWithTags.


        :param balance: The balance of this AddressWithTags.
        :type balance: Values
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def first_tx(self):
        """Gets the first_tx of this AddressWithTags.


        :return: The first_tx of this AddressWithTags.
        :rtype: TxSummary
        """
        return self._first_tx

    @first_tx.setter
    def first_tx(self, first_tx):
        """Sets the first_tx of this AddressWithTags.


        :param first_tx: The first_tx of this AddressWithTags.
        :type first_tx: TxSummary
        """
        if first_tx is None:
            raise ValueError("Invalid value for `first_tx`, must not be `None`")  # noqa: E501

        self._first_tx = first_tx

    @property
    def last_tx(self):
        """Gets the last_tx of this AddressWithTags.


        :return: The last_tx of this AddressWithTags.
        :rtype: TxSummary
        """
        return self._last_tx

    @last_tx.setter
    def last_tx(self, last_tx):
        """Sets the last_tx of this AddressWithTags.


        :param last_tx: The last_tx of this AddressWithTags.
        :type last_tx: TxSummary
        """
        if last_tx is None:
            raise ValueError("Invalid value for `last_tx`, must not be `None`")  # noqa: E501

        self._last_tx = last_tx

    @property
    def in_degree(self):
        """Gets the in_degree of this AddressWithTags.


        :return: The in_degree of this AddressWithTags.
        :rtype: int
        """
        return self._in_degree

    @in_degree.setter
    def in_degree(self, in_degree):
        """Sets the in_degree of this AddressWithTags.


        :param in_degree: The in_degree of this AddressWithTags.
        :type in_degree: int
        """
        if in_degree is None:
            raise ValueError("Invalid value for `in_degree`, must not be `None`")  # noqa: E501

        self._in_degree = in_degree

    @property
    def out_degree(self):
        """Gets the out_degree of this AddressWithTags.


        :return: The out_degree of this AddressWithTags.
        :rtype: int
        """
        return self._out_degree

    @out_degree.setter
    def out_degree(self, out_degree):
        """Sets the out_degree of this AddressWithTags.


        :param out_degree: The out_degree of this AddressWithTags.
        :type out_degree: int
        """
        if out_degree is None:
            raise ValueError("Invalid value for `out_degree`, must not be `None`")  # noqa: E501

        self._out_degree = out_degree

    @property
    def no_incoming_txs(self):
        """Gets the no_incoming_txs of this AddressWithTags.


        :return: The no_incoming_txs of this AddressWithTags.
        :rtype: int
        """
        return self._no_incoming_txs

    @no_incoming_txs.setter
    def no_incoming_txs(self, no_incoming_txs):
        """Sets the no_incoming_txs of this AddressWithTags.


        :param no_incoming_txs: The no_incoming_txs of this AddressWithTags.
        :type no_incoming_txs: int
        """
        if no_incoming_txs is None:
            raise ValueError("Invalid value for `no_incoming_txs`, must not be `None`")  # noqa: E501

        self._no_incoming_txs = no_incoming_txs

    @property
    def no_outgoing_txs(self):
        """Gets the no_outgoing_txs of this AddressWithTags.


        :return: The no_outgoing_txs of this AddressWithTags.
        :rtype: int
        """
        return self._no_outgoing_txs

    @no_outgoing_txs.setter
    def no_outgoing_txs(self, no_outgoing_txs):
        """Sets the no_outgoing_txs of this AddressWithTags.


        :param no_outgoing_txs: The no_outgoing_txs of this AddressWithTags.
        :type no_outgoing_txs: int
        """
        if no_outgoing_txs is None:
            raise ValueError("Invalid value for `no_outgoing_txs`, must not be `None`")  # noqa: E501

        self._no_outgoing_txs = no_outgoing_txs

    @property
    def total_received(self):
        """Gets the total_received of this AddressWithTags.


        :return: The total_received of this AddressWithTags.
        :rtype: Values
        """
        return self._total_received

    @total_received.setter
    def total_received(self, total_received):
        """Sets the total_received of this AddressWithTags.


        :param total_received: The total_received of this AddressWithTags.
        :type total_received: Values
        """
        if total_received is None:
            raise ValueError("Invalid value for `total_received`, must not be `None`")  # noqa: E501

        self._total_received = total_received

    @property
    def total_spent(self):
        """Gets the total_spent of this AddressWithTags.


        :return: The total_spent of this AddressWithTags.
        :rtype: Values
        """
        return self._total_spent

    @total_spent.setter
    def total_spent(self, total_spent):
        """Sets the total_spent of this AddressWithTags.


        :param total_spent: The total_spent of this AddressWithTags.
        :type total_spent: Values
        """
        if total_spent is None:
            raise ValueError("Invalid value for `total_spent`, must not be `None`")  # noqa: E501

        self._total_spent = total_spent

    @property
    def tags(self):
        """Gets the tags of this AddressWithTags.

        Tags  # noqa: E501

        :return: The tags of this AddressWithTags.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AddressWithTags.

        Tags  # noqa: E501

        :param tags: The tags of this AddressWithTags.
        :type tags: List[Tag]
        """

        self._tags = tags
