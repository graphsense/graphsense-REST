# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.get_tx_io_response import GetTxIoResponse
from openapi_server.models.get_tx_io_result import GetTxIoResult
from openapi_server import util

from openapi_server.models.get_tx_io_response import GetTxIoResponse  # noqa: E501
from openapi_server.models.get_tx_io_result import GetTxIoResult  # noqa: E501

class BatchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation='get_tx_io', result=None):  # noqa: E501
        """BatchResponse - a model defined in OpenAPI

        :param operation: The operation of this BatchResponse.  # noqa: E501
        :type operation: str
        :param result: The result of this BatchResponse.  # noqa: E501
        :type result: List[GetTxIoResult]
        """
        self.openapi_types = {
            'operation': str,
            'result': List[GetTxIoResult]
        }

        self.attribute_map = {
            'operation': 'operation',
            'result': 'result'
        }

        #if operation is None:
            #raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        self._operation = operation
        #if result is None:
            #raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501
        self._result = result

    @classmethod
    def from_dict(cls, dikt) -> 'BatchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The batch_response of this BatchResponse.  # noqa: E501
        :rtype: BatchResponse
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The BatchResponse as a dict
        :rtype: dict
        """
        return { 'operation': self._operation,
            'result': self._result }


    @property
    def operation(self):
        """Gets the operation of this BatchResponse.


        :return: The operation of this BatchResponse.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this BatchResponse.


        :param operation: The operation of this BatchResponse.
        :type operation: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def result(self):
        """Gets the result of this BatchResponse.


        :return: The result of this BatchResponse.
        :rtype: List[GetTxIoResult]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this BatchResponse.


        :param result: The result of this BatchResponse.
        :type result: List[GetTxIoResult]
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result
