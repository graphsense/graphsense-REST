# coding: utf-8
from gsrest.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class LabelSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, count: int=None, confidence: float=None, relevance: float=None, creators: List[str]=None, sources: List[str]=None, concepts: List[str]=None, lastmod: int=None, inherited_from: str=None):
        """LabelSummary - a model defined in OpenAPI

        :param label: The label of this LabelSummary.
        :param count: The count of this LabelSummary.
        :param confidence: The confidence of this LabelSummary.
        :param relevance: The relevance of this LabelSummary.
        :param creators: The creators of this LabelSummary.
        :param sources: The sources of this LabelSummary.
        :param concepts: The concepts of this LabelSummary.
        :param lastmod: The lastmod of this LabelSummary.
        :param inherited_from: The inherited_from of this LabelSummary.
        """
        self.openapi_types = {
            'label': str,
            'count': int,
            'confidence': float,
            'relevance': float,
            'creators': List[str],
            'sources': List[str],
            'concepts': List[str],
            'lastmod': int,
            'inherited_from': str
        }

        self.attribute_map = {
            'label': 'label',
            'count': 'count',
            'confidence': 'confidence',
            'relevance': 'relevance',
            'creators': 'creators',
            'sources': 'sources',
            'concepts': 'concepts',
            'lastmod': 'lastmod',
            'inherited_from': 'inherited_from'
        }

        self._label = label
        self._count = count
        self._confidence = confidence
        self._relevance = relevance
        self._creators = creators
        self._sources = sources
        self._concepts = concepts
        self._lastmod = lastmod
        self._inherited_from = inherited_from

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The label_summary of this LabelSummary.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The LabelSummary as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'label': self._label,
            'count': self._count,
            'confidence': self._confidence,
            'relevance': self._relevance,
            'creators': self._creators,
            'sources': self._sources,
            'concepts': self._concepts,
            'lastmod': self._lastmod,
            'inherited_from': self._inherited_from }


    @property
    def label(self):
        """Gets the label of this LabelSummary.


        :return: The label of this LabelSummary.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this LabelSummary.


        :param label: The label of this LabelSummary.
        :type label: str
        """
        if label is None:
            raise BadUserInputException("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def count(self):
        """Gets the count of this LabelSummary.


        :return: The count of this LabelSummary.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this LabelSummary.


        :param count: The count of this LabelSummary.
        :type count: int
        """
        if count is None:
            raise BadUserInputException("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def confidence(self):
        """Gets the confidence of this LabelSummary.


        :return: The confidence of this LabelSummary.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this LabelSummary.


        :param confidence: The confidence of this LabelSummary.
        :type confidence: float
        """
        if confidence is None:
            raise BadUserInputException("Invalid value for `confidence`, must not be `None`")

        self._confidence = confidence

    @property
    def relevance(self):
        """Gets the relevance of this LabelSummary.


        :return: The relevance of this LabelSummary.
        :rtype: float
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance):
        """Sets the relevance of this LabelSummary.


        :param relevance: The relevance of this LabelSummary.
        :type relevance: float
        """
        if relevance is None:
            raise BadUserInputException("Invalid value for `relevance`, must not be `None`")

        self._relevance = relevance

    @property
    def creators(self):
        """Gets the creators of this LabelSummary.


        :return: The creators of this LabelSummary.
        :rtype: List[str]
        """
        return self._creators

    @creators.setter
    def creators(self, creators):
        """Sets the creators of this LabelSummary.


        :param creators: The creators of this LabelSummary.
        :type creators: List[str]
        """
        if creators is None:
            raise BadUserInputException("Invalid value for `creators`, must not be `None`")

        self._creators = creators

    @property
    def sources(self):
        """Gets the sources of this LabelSummary.


        :return: The sources of this LabelSummary.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this LabelSummary.


        :param sources: The sources of this LabelSummary.
        :type sources: List[str]
        """
        if sources is None:
            raise BadUserInputException("Invalid value for `sources`, must not be `None`")

        self._sources = sources

    @property
    def concepts(self):
        """Gets the concepts of this LabelSummary.


        :return: The concepts of this LabelSummary.
        :rtype: List[str]
        """
        return self._concepts

    @concepts.setter
    def concepts(self, concepts):
        """Sets the concepts of this LabelSummary.


        :param concepts: The concepts of this LabelSummary.
        :type concepts: List[str]
        """
        if concepts is None:
            raise BadUserInputException("Invalid value for `concepts`, must not be `None`")

        self._concepts = concepts

    @property
    def lastmod(self):
        """Gets the lastmod of this LabelSummary.


        :return: The lastmod of this LabelSummary.
        :rtype: int
        """
        return self._lastmod

    @lastmod.setter
    def lastmod(self, lastmod):
        """Sets the lastmod of this LabelSummary.


        :param lastmod: The lastmod of this LabelSummary.
        :type lastmod: int
        """
        if lastmod is None:
            raise BadUserInputException("Invalid value for `lastmod`, must not be `None`")

        self._lastmod = lastmod

    @property
    def inherited_from(self):
        """Gets the inherited_from of this LabelSummary.

        if the tag was inherited from cluster

        :return: The inherited_from of this LabelSummary.
        :rtype: str
        """
        return self._inherited_from

    @inherited_from.setter
    def inherited_from(self, inherited_from):
        """Sets the inherited_from of this LabelSummary.

        if the tag was inherited from cluster

        :param inherited_from: The inherited_from of this LabelSummary.
        :type inherited_from: str
        """
        allowed_values = ["cluster"]  # noqa: E501
        if inherited_from not in allowed_values:
            raise BadUserInputException(
                "Invalid value for `inherited_from` ({0}), must be one of {1}"
                .format(inherited_from, allowed_values)
            )

        self._inherited_from = inherited_from
