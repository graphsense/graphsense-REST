# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class RatesRates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eur=None, usd=None):  # noqa: E501
        """RatesRates - a model defined in OpenAPI

        :param eur: The eur of this RatesRates.  # noqa: E501
        :type eur: float
        :param usd: The usd of this RatesRates.  # noqa: E501
        :type usd: float
        """
        self.openapi_types = {
            'eur': float,
            'usd': float
        }

        self.attribute_map = {
            'eur': 'eur',
            'usd': 'usd'
        }

        self._eur = eur
        self._usd = usd

    @classmethod
    def from_dict(cls, dikt) -> 'RatesRates':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The rates_rates of this RatesRates.  # noqa: E501
        :rtype: RatesRates
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The RatesRates as a dict
        :rtype: dict
        """
        return { 'eur': self._eur,
            'usd': self._usd }


    @property
    def eur(self):
        """Gets the eur of this RatesRates.

        EUR/Crypto rate  # noqa: E501

        :return: The eur of this RatesRates.
        :rtype: float
        """
        return self._eur

    @eur.setter
    def eur(self, eur):
        """Sets the eur of this RatesRates.

        EUR/Crypto rate  # noqa: E501

        :param eur: The eur of this RatesRates.
        :type eur: float
        """

        self._eur = eur

    @property
    def usd(self):
        """Gets the usd of this RatesRates.

        USD/Crypto rate  # noqa: E501

        :return: The usd of this RatesRates.
        :rtype: float
        """
        return self._usd

    @usd.setter
    def usd(self, usd):
        """Sets the usd of this RatesRates.

        USD/Crypto rate  # noqa: E501

        :param usd: The usd of this RatesRates.
        :type usd: float
        """

        self._usd = usd
