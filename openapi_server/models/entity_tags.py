# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.entity_tag import EntityTag
from openapi_server import util


class EntityTags(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_tags: List[EntityTag]=None, next_page: str=None):
        """EntityTags - a model defined in OpenAPI

        :param entity_tags: The entity_tags of this EntityTags.
        :param next_page: The next_page of this EntityTags.
        """
        self.openapi_types = {
            'entity_tags': List[EntityTag],
            'next_page': str
        }

        self.attribute_map = {
            'entity_tags': 'entity_tags',
            'next_page': 'next_page'
        }

        self._entity_tags = entity_tags
        self._next_page = next_page

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityTags':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The entity_tags of this EntityTags.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_tags(self):
        """Gets the entity_tags of this EntityTags.


        :return: The entity_tags of this EntityTags.
        :rtype: List[EntityTag]
        """
        return self._entity_tags

    @entity_tags.setter
    def entity_tags(self, entity_tags):
        """Sets the entity_tags of this EntityTags.


        :param entity_tags: The entity_tags of this EntityTags.
        :type entity_tags: List[EntityTag]
        """
        if entity_tags is None:
            raise ValueError("Invalid value for `entity_tags`, must not be `None`")

        self._entity_tags = entity_tags

    @property
    def next_page(self):
        """Gets the next_page of this EntityTags.


        :return: The next_page of this EntityTags.
        :rtype: str
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this EntityTags.


        :param next_page: The next_page of this EntityTags.
        :type next_page: str
        """

        self._next_page = next_page
