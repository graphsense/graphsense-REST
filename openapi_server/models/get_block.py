# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class GetBlock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api='blocks', height=None, operation='get_block'):  # noqa: E501
        """GetBlock - a model defined in OpenAPI

        :param api: The api of this GetBlock.  # noqa: E501
        :type api: str
        :param height: The height of this GetBlock.  # noqa: E501
        :type height: List[int]
        :param operation: The operation of this GetBlock.  # noqa: E501
        :type operation: str
        """
        self.openapi_types = {
            'api': str,
            'height': List[int],
            'operation': str
        }

        self.attribute_map = {
            'api': 'api',
            'height': 'height',
            'operation': 'operation'
        }

        #if api is None:
            #raise ValueError("Invalid value for `api`, must not be `None`")  # noqa: E501
        self._api = api
        #if height is None:
            #raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501
        self._height = height
        #if operation is None:
            #raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        self._operation = operation

    @classmethod
    def from_dict(cls, dikt) -> 'GetBlock':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The get_block of this GetBlock.  # noqa: E501
        :rtype: GetBlock
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The GetBlock as a dict
        :rtype: dict
        """
        return { 'api': self._api,
            'height': self._height,
            'operation': self._operation }


    @property
    def api(self):
        """Gets the api of this GetBlock.


        :return: The api of this GetBlock.
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this GetBlock.


        :param api: The api of this GetBlock.
        :type api: str
        """
        if api is None:
            raise ValueError("Invalid value for `api`, must not be `None`")  # noqa: E501

        self._api = api

    @property
    def height(self):
        """Gets the height of this GetBlock.


        :return: The height of this GetBlock.
        :rtype: List[int]
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this GetBlock.


        :param height: The height of this GetBlock.
        :type height: List[int]
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def operation(self):
        """Gets the operation of this GetBlock.


        :return: The operation of this GetBlock.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this GetBlock.


        :param operation: The operation of this GetBlock.
        :type operation: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation
