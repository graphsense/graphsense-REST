# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.values import Values
from openapi_server import util

from openapi_server.models.values import Values  # noqa: E501

class TxValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address=None, value=None):  # noqa: E501
        """TxValue - a model defined in OpenAPI

        :param address: The address of this TxValue.  # noqa: E501
        :type address: str
        :param value: The value of this TxValue.  # noqa: E501
        :type value: Values
        """
        self.openapi_types = {
            'address': str,
            'value': Values
        }

        self.attribute_map = {
            'address': 'address',
            'value': 'value'
        }

        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        self._address = address
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'TxValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The tx_value of this TxValue.  # noqa: E501
        :rtype: TxValue
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The TxValue as a dict
        :rtype: dict
        """
        return { 'address': self._address,
            'value': self._value }


    @property
    def address(self):
        """Gets the address of this TxValue.

        Address  # noqa: E501

        :return: The address of this TxValue.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TxValue.

        Address  # noqa: E501

        :param address: The address of this TxValue.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def value(self):
        """Gets the value of this TxValue.


        :return: The value of this TxValue.
        :rtype: Values
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TxValue.


        :param value: The value of this TxValue.
        :type value: Values
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
