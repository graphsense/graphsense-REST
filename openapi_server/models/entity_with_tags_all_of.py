# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.tag import Tag
from openapi_server import util

from openapi_server.models.tag import Tag  # noqa: E501

class EntityWithTagsAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tags=None, tag_coherence=None):  # noqa: E501
        """EntityWithTagsAllOf - a model defined in OpenAPI

        :param tags: The tags of this EntityWithTagsAllOf.  # noqa: E501
        :type tags: List[Tag]
        :param tag_coherence: The tag_coherence of this EntityWithTagsAllOf.  # noqa: E501
        :type tag_coherence: float
        """
        self.openapi_types = {
            'tags': List[Tag],
            'tag_coherence': float
        }

        self.attribute_map = {
            'tags': 'tags',
            'tag_coherence': 'tag_coherence'
        }

        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501
        self._tags = tags
        self._tag_coherence = tag_coherence

    @classmethod
    def from_dict(cls, dikt) -> 'EntityWithTagsAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The entity_with_tags_allOf of this EntityWithTagsAllOf.  # noqa: E501
        :rtype: EntityWithTagsAllOf
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The EntityWithTagsAllOf as a dict
        :rtype: dict
        """
        return { 'tags': self._tags,
            'tag_coherence': self._tag_coherence }


    @property
    def tags(self):
        """Gets the tags of this EntityWithTagsAllOf.

        Tags  # noqa: E501

        :return: The tags of this EntityWithTagsAllOf.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this EntityWithTagsAllOf.

        Tags  # noqa: E501

        :param tags: The tags of this EntityWithTagsAllOf.
        :type tags: List[Tag]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def tag_coherence(self):
        """Gets the tag_coherence of this EntityWithTagsAllOf.

        Tag coherence  # noqa: E501

        :return: The tag_coherence of this EntityWithTagsAllOf.
        :rtype: float
        """
        return self._tag_coherence

    @tag_coherence.setter
    def tag_coherence(self, tag_coherence):
        """Sets the tag_coherence of this EntityWithTagsAllOf.

        Tag coherence  # noqa: E501

        :param tag_coherence: The tag_coherence of this EntityWithTagsAllOf.
        :type tag_coherence: float
        """

        self._tag_coherence = tag_coherence
