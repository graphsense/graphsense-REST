# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.address import Address
from openapi_server.models.entity import Entity
from openapi_server.models.neighbor import Neighbor
from openapi_server.models.search_result_leaf import SearchResultLeaf
from openapi_server.models.search_result_level3_all_of import SearchResultLevel3AllOf
from openapi_server.models.search_result_level4 import SearchResultLevel4
from openapi_server import util


class SearchResultLevel3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, matching_addresses: List[Address]=None, node: Entity=None, relation: Neighbor=None, paths: List[SearchResultLevel4]=None):
        """SearchResultLevel3 - a model defined in OpenAPI

        :param matching_addresses: The matching_addresses of this SearchResultLevel3.
        :param node: The node of this SearchResultLevel3.
        :param relation: The relation of this SearchResultLevel3.
        :param paths: The paths of this SearchResultLevel3.
        """
        self.openapi_types = {
            'matching_addresses': List[Address],
            'node': Entity,
            'relation': Neighbor,
            'paths': List[SearchResultLevel4]
        }

        self.attribute_map = {
            'matching_addresses': 'matching_addresses',
            'node': 'node',
            'relation': 'relation',
            'paths': 'paths'
        }

        self._matching_addresses = matching_addresses
        self._node = node
        self._relation = relation
        self._paths = paths

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResultLevel3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The search_result_level3 of this SearchResultLevel3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def matching_addresses(self):
        """Gets the matching_addresses of this SearchResultLevel3.


        :return: The matching_addresses of this SearchResultLevel3.
        :rtype: List[Address]
        """
        return self._matching_addresses

    @matching_addresses.setter
    def matching_addresses(self, matching_addresses):
        """Sets the matching_addresses of this SearchResultLevel3.


        :param matching_addresses: The matching_addresses of this SearchResultLevel3.
        :type matching_addresses: List[Address]
        """

        self._matching_addresses = matching_addresses

    @property
    def node(self):
        """Gets the node of this SearchResultLevel3.


        :return: The node of this SearchResultLevel3.
        :rtype: Entity
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this SearchResultLevel3.


        :param node: The node of this SearchResultLevel3.
        :type node: Entity
        """

        self._node = node

    @property
    def relation(self):
        """Gets the relation of this SearchResultLevel3.


        :return: The relation of this SearchResultLevel3.
        :rtype: Neighbor
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this SearchResultLevel3.


        :param relation: The relation of this SearchResultLevel3.
        :type relation: Neighbor
        """

        self._relation = relation

    @property
    def paths(self):
        """Gets the paths of this SearchResultLevel3.

        Branches to matching entities

        :return: The paths of this SearchResultLevel3.
        :rtype: List[SearchResultLevel4]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this SearchResultLevel3.

        Branches to matching entities

        :param paths: The paths of this SearchResultLevel3.
        :type paths: List[SearchResultLevel4]
        """

        self._paths = paths
