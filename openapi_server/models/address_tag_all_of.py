# coding: utf-8
from gsrest.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AddressTagAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None):
        """AddressTagAllOf - a model defined in OpenAPI

        :param address: The address of this AddressTagAllOf.
        """
        self.openapi_types = {
            'address': str
        }

        self.attribute_map = {
            'address': 'address'
        }

        self._address = address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressTagAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The address_tag_allOf of this AddressTagAllOf.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The AddressTagAllOf as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'address': self._address }


    @property
    def address(self):
        """Gets the address of this AddressTagAllOf.

        Address

        :return: The address of this AddressTagAllOf.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AddressTagAllOf.

        Address

        :param address: The address of this AddressTagAllOf.
        :type address: str
        """
        if address is None:
            raise BadUserInputException("Invalid value for `address`, must not be `None`")

        self._address = address
