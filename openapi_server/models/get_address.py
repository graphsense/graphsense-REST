# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class GetAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address=None, api='addresses', operation='get_address'):  # noqa: E501
        """GetAddress - a model defined in OpenAPI

        :param address: The address of this GetAddress.  # noqa: E501
        :type address: List[str]
        :param api: The api of this GetAddress.  # noqa: E501
        :type api: str
        :param operation: The operation of this GetAddress.  # noqa: E501
        :type operation: str
        """
        self.openapi_types = {
            'address': List[str],
            'api': str,
            'operation': str
        }

        self.attribute_map = {
            'address': 'address',
            'api': 'api',
            'operation': 'operation'
        }

        #if address is None:
            #raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        self._address = address
        #if api is None:
            #raise ValueError("Invalid value for `api`, must not be `None`")  # noqa: E501
        self._api = api
        #if operation is None:
            #raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        self._operation = operation

    @classmethod
    def from_dict(cls, dikt) -> 'GetAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The get_address of this GetAddress.  # noqa: E501
        :rtype: GetAddress
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, prefix=""):
        """Returns the model as a dict:

        :return: The GetAddress as a dict
        :rtype: dict
        """
        return { 'address': self._address,
            'api': self._api,
            'operation': self._operation }


    @property
    def address(self):
        """Gets the address of this GetAddress.


        :return: The address of this GetAddress.
        :rtype: List[str]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this GetAddress.


        :param address: The address of this GetAddress.
        :type address: List[str]
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def api(self):
        """Gets the api of this GetAddress.


        :return: The api of this GetAddress.
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this GetAddress.


        :param api: The api of this GetAddress.
        :type api: str
        """
        if api is None:
            raise ValueError("Invalid value for `api`, must not be `None`")  # noqa: E501

        self._api = api

    @property
    def operation(self):
        """Gets the operation of this GetAddress.


        :return: The operation of this GetAddress.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this GetAddress.


        :param operation: The operation of this GetAddress.
        :type operation: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation
