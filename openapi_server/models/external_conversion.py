# coding: utf-8
from graphsenselib.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ExternalConversion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversion_type: str=None, from_address: str=None, to_address: str=None, from_asset: str=None, to_asset: str=None, from_amount: str=None, to_amount: str=None, from_asset_transfer: str=None, to_asset_transfer: str=None, from_network: str=None, to_network: str=None, from_is_supported_asset: bool=None, to_is_supported_asset: bool=None):
        """ExternalConversion - a model defined in OpenAPI

        :param conversion_type: The conversion_type of this ExternalConversion.
        :param from_address: The from_address of this ExternalConversion.
        :param to_address: The to_address of this ExternalConversion.
        :param from_asset: The from_asset of this ExternalConversion.
        :param to_asset: The to_asset of this ExternalConversion.
        :param from_amount: The from_amount of this ExternalConversion.
        :param to_amount: The to_amount of this ExternalConversion.
        :param from_asset_transfer: The from_asset_transfer of this ExternalConversion.
        :param to_asset_transfer: The to_asset_transfer of this ExternalConversion.
        :param from_network: The from_network of this ExternalConversion.
        :param to_network: The to_network of this ExternalConversion.
        :param from_is_supported_asset: The from_is_supported_asset of this ExternalConversion.
        :param to_is_supported_asset: The to_is_supported_asset of this ExternalConversion.
        """
        self.openapi_types = {
            'conversion_type': str,
            'from_address': str,
            'to_address': str,
            'from_asset': str,
            'to_asset': str,
            'from_amount': str,
            'to_amount': str,
            'from_asset_transfer': str,
            'to_asset_transfer': str,
            'from_network': str,
            'to_network': str,
            'from_is_supported_asset': bool,
            'to_is_supported_asset': bool
        }

        self.attribute_map = {
            'conversion_type': 'conversion_type',
            'from_address': 'from_address',
            'to_address': 'to_address',
            'from_asset': 'from_asset',
            'to_asset': 'to_asset',
            'from_amount': 'from_amount',
            'to_amount': 'to_amount',
            'from_asset_transfer': 'from_asset_transfer',
            'to_asset_transfer': 'to_asset_transfer',
            'from_network': 'from_network',
            'to_network': 'to_network',
            'from_is_supported_asset': 'from_is_supported_asset',
            'to_is_supported_asset': 'to_is_supported_asset'
        }

        self._conversion_type = conversion_type
        self._from_address = from_address
        self._to_address = to_address
        self._from_asset = from_asset
        self._to_asset = to_asset
        self._from_amount = from_amount
        self._to_amount = to_amount
        self._from_asset_transfer = from_asset_transfer
        self._to_asset_transfer = to_asset_transfer
        self._from_network = from_network
        self._to_network = to_network
        self._from_is_supported_asset = from_is_supported_asset
        self._to_is_supported_asset = to_is_supported_asset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalConversion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The external_conversion of this ExternalConversion.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The ExternalConversion as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'conversion_type': self._conversion_type,
            'from_address': self._from_address,
            'to_address': self._to_address,
            'from_asset': self._from_asset,
            'to_asset': self._to_asset,
            'from_amount': self._from_amount,
            'to_amount': self._to_amount,
            'from_asset_transfer': self._from_asset_transfer,
            'to_asset_transfer': self._to_asset_transfer,
            'from_network': self._from_network,
            'to_network': self._to_network,
            'from_is_supported_asset': self._from_is_supported_asset,
            'to_is_supported_asset': self._to_is_supported_asset }


    @property
    def conversion_type(self):
        """Gets the conversion_type of this ExternalConversion.


        :return: The conversion_type of this ExternalConversion.
        :rtype: str
        """
        return self._conversion_type

    @conversion_type.setter
    def conversion_type(self, conversion_type):
        """Sets the conversion_type of this ExternalConversion.


        :param conversion_type: The conversion_type of this ExternalConversion.
        :type conversion_type: str
        """
        allowed_values = ["dex_swap", "bridge_tx"]  # noqa: E501
        if conversion_type not in allowed_values:
            raise BadUserInputException(
                "Invalid value for `conversion_type` ({0}), must be one of {1}"
                .format(conversion_type, allowed_values)
            )

        self._conversion_type = conversion_type

    @property
    def from_address(self):
        """Gets the from_address of this ExternalConversion.

        Provider of the input assets of the external conversion

        :return: The from_address of this ExternalConversion.
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this ExternalConversion.

        Provider of the input assets of the external conversion

        :param from_address: The from_address of this ExternalConversion.
        :type from_address: str
        """
        if from_address is None:
            raise BadUserInputException("Invalid value for `from_address`, must not be `None`")

        self._from_address = from_address

    @property
    def to_address(self):
        """Gets the to_address of this ExternalConversion.

        Receiver of the output assets of the external conversion

        :return: The to_address of this ExternalConversion.
        :rtype: str
        """
        return self._to_address

    @to_address.setter
    def to_address(self, to_address):
        """Sets the to_address of this ExternalConversion.

        Receiver of the output assets of the external conversion

        :param to_address: The to_address of this ExternalConversion.
        :type to_address: str
        """
        if to_address is None:
            raise BadUserInputException("Invalid value for `to_address`, must not be `None`")

        self._to_address = to_address

    @property
    def from_asset(self):
        """Gets the from_asset of this ExternalConversion.

        Asset converted from

        :return: The from_asset of this ExternalConversion.
        :rtype: str
        """
        return self._from_asset

    @from_asset.setter
    def from_asset(self, from_asset):
        """Sets the from_asset of this ExternalConversion.

        Asset converted from

        :param from_asset: The from_asset of this ExternalConversion.
        :type from_asset: str
        """
        if from_asset is None:
            raise BadUserInputException("Invalid value for `from_asset`, must not be `None`")

        self._from_asset = from_asset

    @property
    def to_asset(self):
        """Gets the to_asset of this ExternalConversion.

        Asset converted to

        :return: The to_asset of this ExternalConversion.
        :rtype: str
        """
        return self._to_asset

    @to_asset.setter
    def to_asset(self, to_asset):
        """Sets the to_asset of this ExternalConversion.

        Asset converted to

        :param to_asset: The to_asset of this ExternalConversion.
        :type to_asset: str
        """
        if to_asset is None:
            raise BadUserInputException("Invalid value for `to_asset`, must not be `None`")

        self._to_asset = to_asset

    @property
    def from_amount(self):
        """Gets the from_amount of this ExternalConversion.

        Amount of asset converted from

        :return: The from_amount of this ExternalConversion.
        :rtype: str
        """
        return self._from_amount

    @from_amount.setter
    def from_amount(self, from_amount):
        """Sets the from_amount of this ExternalConversion.

        Amount of asset converted from

        :param from_amount: The from_amount of this ExternalConversion.
        :type from_amount: str
        """
        if from_amount is None:
            raise BadUserInputException("Invalid value for `from_amount`, must not be `None`")

        self._from_amount = from_amount

    @property
    def to_amount(self):
        """Gets the to_amount of this ExternalConversion.

        Amount of asset converted to

        :return: The to_amount of this ExternalConversion.
        :rtype: str
        """
        return self._to_amount

    @to_amount.setter
    def to_amount(self, to_amount):
        """Sets the to_amount of this ExternalConversion.

        Amount of asset converted to

        :param to_amount: The to_amount of this ExternalConversion.
        :type to_amount: str
        """
        if to_amount is None:
            raise BadUserInputException("Invalid value for `to_amount`, must not be `None`")

        self._to_amount = to_amount

    @property
    def from_asset_transfer(self):
        """Gets the from_asset_transfer of this ExternalConversion.

        Initial asset transfer starting the conversion process

        :return: The from_asset_transfer of this ExternalConversion.
        :rtype: str
        """
        return self._from_asset_transfer

    @from_asset_transfer.setter
    def from_asset_transfer(self, from_asset_transfer):
        """Sets the from_asset_transfer of this ExternalConversion.

        Initial asset transfer starting the conversion process

        :param from_asset_transfer: The from_asset_transfer of this ExternalConversion.
        :type from_asset_transfer: str
        """
        if from_asset_transfer is None:
            raise BadUserInputException("Invalid value for `from_asset_transfer`, must not be `None`")

        self._from_asset_transfer = from_asset_transfer

    @property
    def to_asset_transfer(self):
        """Gets the to_asset_transfer of this ExternalConversion.

        Output asset transfer ending the conversion process

        :return: The to_asset_transfer of this ExternalConversion.
        :rtype: str
        """
        return self._to_asset_transfer

    @to_asset_transfer.setter
    def to_asset_transfer(self, to_asset_transfer):
        """Sets the to_asset_transfer of this ExternalConversion.

        Output asset transfer ending the conversion process

        :param to_asset_transfer: The to_asset_transfer of this ExternalConversion.
        :type to_asset_transfer: str
        """
        if to_asset_transfer is None:
            raise BadUserInputException("Invalid value for `to_asset_transfer`, must not be `None`")

        self._to_asset_transfer = to_asset_transfer

    @property
    def from_network(self):
        """Gets the from_network of this ExternalConversion.

        Network where the initial payment took place

        :return: The from_network of this ExternalConversion.
        :rtype: str
        """
        return self._from_network

    @from_network.setter
    def from_network(self, from_network):
        """Sets the from_network of this ExternalConversion.

        Network where the initial payment took place

        :param from_network: The from_network of this ExternalConversion.
        :type from_network: str
        """
        if from_network is None:
            raise BadUserInputException("Invalid value for `from_network`, must not be `None`")

        self._from_network = from_network

    @property
    def to_network(self):
        """Gets the to_network of this ExternalConversion.

        Network where the concluding payment took place

        :return: The to_network of this ExternalConversion.
        :rtype: str
        """
        return self._to_network

    @to_network.setter
    def to_network(self, to_network):
        """Sets the to_network of this ExternalConversion.

        Network where the concluding payment took place

        :param to_network: The to_network of this ExternalConversion.
        :type to_network: str
        """
        if to_network is None:
            raise BadUserInputException("Invalid value for `to_network`, must not be `None`")

        self._to_network = to_network

    @property
    def from_is_supported_asset(self):
        """Gets the from_is_supported_asset of this ExternalConversion.

        Whether the from asset is a supported asset

        :return: The from_is_supported_asset of this ExternalConversion.
        :rtype: bool
        """
        return self._from_is_supported_asset

    @from_is_supported_asset.setter
    def from_is_supported_asset(self, from_is_supported_asset):
        """Sets the from_is_supported_asset of this ExternalConversion.

        Whether the from asset is a supported asset

        :param from_is_supported_asset: The from_is_supported_asset of this ExternalConversion.
        :type from_is_supported_asset: bool
        """
        if from_is_supported_asset is None:
            raise BadUserInputException("Invalid value for `from_is_supported_asset`, must not be `None`")

        self._from_is_supported_asset = from_is_supported_asset

    @property
    def to_is_supported_asset(self):
        """Gets the to_is_supported_asset of this ExternalConversion.

        Whether the to asset is a supported asset

        :return: The to_is_supported_asset of this ExternalConversion.
        :rtype: bool
        """
        return self._to_is_supported_asset

    @to_is_supported_asset.setter
    def to_is_supported_asset(self, to_is_supported_asset):
        """Sets the to_is_supported_asset of this ExternalConversion.

        Whether the to asset is a supported asset

        :param to_is_supported_asset: The to_is_supported_asset of this ExternalConversion.
        :type to_is_supported_asset: bool
        """
        if to_is_supported_asset is None:
            raise BadUserInputException("Invalid value for `to_is_supported_asset`, must not be `None`")

        self._to_is_supported_asset = to_is_supported_asset
