# coding: utf-8
from graphsenselib.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TokenConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ticker: str=None, decimals: int=None, peg_currency: str=None, contract_address: str=None):
        """TokenConfig - a model defined in OpenAPI

        :param ticker: The ticker of this TokenConfig.
        :param decimals: The decimals of this TokenConfig.
        :param peg_currency: The peg_currency of this TokenConfig.
        :param contract_address: The contract_address of this TokenConfig.
        """
        self.openapi_types = {
            'ticker': str,
            'decimals': int,
            'peg_currency': str,
            'contract_address': str
        }

        self.attribute_map = {
            'ticker': 'ticker',
            'decimals': 'decimals',
            'peg_currency': 'peg_currency',
            'contract_address': 'contract_address'
        }

        self._ticker = ticker
        self._decimals = decimals
        self._peg_currency = peg_currency
        self._contract_address = contract_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The token_config of this TokenConfig.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The TokenConfig as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'ticker': self._ticker,
            'decimals': self._decimals,
            'peg_currency': self._peg_currency,
            'contract_address': self._contract_address }


    @property
    def ticker(self):
        """Gets the ticker of this TokenConfig.

        ticker symbol of the currency e.g. USDT

        :return: The ticker of this TokenConfig.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this TokenConfig.

        ticker symbol of the currency e.g. USDT

        :param ticker: The ticker of this TokenConfig.
        :type ticker: str
        """
        if ticker is None:
            raise BadUserInputException("Invalid value for `ticker`, must not be `None`")

        self._ticker = ticker

    @property
    def decimals(self):
        """Gets the decimals of this TokenConfig.

        the number of digits after the comma. Values are always delivered as integers. This value can be used to set the decimal point at the right place.

        :return: The decimals of this TokenConfig.
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this TokenConfig.

        the number of digits after the comma. Values are always delivered as integers. This value can be used to set the decimal point at the right place.

        :param decimals: The decimals of this TokenConfig.
        :type decimals: int
        """
        if decimals is None:
            raise BadUserInputException("Invalid value for `decimals`, must not be `None`")

        self._decimals = decimals

    @property
    def peg_currency(self):
        """Gets the peg_currency of this TokenConfig.

        is set if token is a stablecoin. It holds the thicker symbol of the currency the tokens is pegged to.

        :return: The peg_currency of this TokenConfig.
        :rtype: str
        """
        return self._peg_currency

    @peg_currency.setter
    def peg_currency(self, peg_currency):
        """Sets the peg_currency of this TokenConfig.

        is set if token is a stablecoin. It holds the thicker symbol of the currency the tokens is pegged to.

        :param peg_currency: The peg_currency of this TokenConfig.
        :type peg_currency: str
        """

        self._peg_currency = peg_currency

    @property
    def contract_address(self):
        """Gets the contract_address of this TokenConfig.

        the contract address of the token on the blockchain. This is only set for tokens that are not native to the blockchain.

        :return: The contract_address of this TokenConfig.
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this TokenConfig.

        the contract address of the token on the blockchain. This is only set for tokens that are not native to the blockchain.

        :param contract_address: The contract_address of this TokenConfig.
        :type contract_address: str
        """

        self._contract_address = contract_address
