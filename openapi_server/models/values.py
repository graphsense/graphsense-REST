# coding: utf-8
from graphsenselib.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.rate import Rate
from openapi_server import util


class Values(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fiat_values: List[Rate]=None, value: int=None):
        """Values - a model defined in OpenAPI

        :param fiat_values: The fiat_values of this Values.
        :param value: The value of this Values.
        """
        self.openapi_types = {
            'fiat_values': List[Rate],
            'value': int
        }

        self.attribute_map = {
            'fiat_values': 'fiat_values',
            'value': 'value'
        }

        self._fiat_values = fiat_values
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Values':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The values of this Values.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The Values as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'fiat_values': self._fiat_values,
            'value': self._value }


    @property
    def fiat_values(self):
        """Gets the fiat_values of this Values.


        :return: The fiat_values of this Values.
        :rtype: List[Rate]
        """
        return self._fiat_values

    @fiat_values.setter
    def fiat_values(self, fiat_values):
        """Sets the fiat_values of this Values.


        :param fiat_values: The fiat_values of this Values.
        :type fiat_values: List[Rate]
        """
        if fiat_values is None:
            raise BadUserInputException("Invalid value for `fiat_values`, must not be `None`")

        self._fiat_values = fiat_values

    @property
    def value(self):
        """Gets the value of this Values.


        :return: The value of this Values.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Values.


        :param value: The value of this Values.
        :type value: int
        """
        if value is None:
            raise BadUserInputException("Invalid value for `value`, must not be `None`")

        self._value = value
