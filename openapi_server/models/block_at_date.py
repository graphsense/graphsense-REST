# coding: utf-8
from gsrest.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BlockAtDate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, before_block: int=None, before_timestamp: int=None, after_block: int=None, after_timestamp: int=None):
        """BlockAtDate - a model defined in OpenAPI

        :param before_block: The before_block of this BlockAtDate.
        :param before_timestamp: The before_timestamp of this BlockAtDate.
        :param after_block: The after_block of this BlockAtDate.
        :param after_timestamp: The after_timestamp of this BlockAtDate.
        """
        self.openapi_types = {
            'before_block': int,
            'before_timestamp': int,
            'after_block': int,
            'after_timestamp': int
        }

        self.attribute_map = {
            'before_block': 'before_block',
            'before_timestamp': 'before_timestamp',
            'after_block': 'after_block',
            'after_timestamp': 'after_timestamp'
        }

        self._before_block = before_block
        self._before_timestamp = before_timestamp
        self._after_block = after_block
        self._after_timestamp = after_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlockAtDate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The block_at_date of this BlockAtDate.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The BlockAtDate as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'before_block': self._before_block,
            'before_timestamp': self._before_timestamp,
            'after_block': self._after_block,
            'after_timestamp': self._after_timestamp }


    @property
    def before_block(self):
        """Gets the before_block of this BlockAtDate.

        Height

        :return: The before_block of this BlockAtDate.
        :rtype: int
        """
        return self._before_block

    @before_block.setter
    def before_block(self, before_block):
        """Sets the before_block of this BlockAtDate.

        Height

        :param before_block: The before_block of this BlockAtDate.
        :type before_block: int
        """
        if before_block is None:
            raise BadUserInputException("Invalid value for `before_block`, must not be `None`")
        if before_block is not None and before_block < 0:
            raise BadUserInputException("Invalid value for `before_block`, must be a value greater than or equal to `0`")

        self._before_block = before_block

    @property
    def before_timestamp(self):
        """Gets the before_timestamp of this BlockAtDate.

        Timestamp in posix seconds format

        :return: The before_timestamp of this BlockAtDate.
        :rtype: int
        """
        return self._before_timestamp

    @before_timestamp.setter
    def before_timestamp(self, before_timestamp):
        """Sets the before_timestamp of this BlockAtDate.

        Timestamp in posix seconds format

        :param before_timestamp: The before_timestamp of this BlockAtDate.
        :type before_timestamp: int
        """
        if before_timestamp is None:
            raise BadUserInputException("Invalid value for `before_timestamp`, must not be `None`")

        self._before_timestamp = before_timestamp

    @property
    def after_block(self):
        """Gets the after_block of this BlockAtDate.

        Height

        :return: The after_block of this BlockAtDate.
        :rtype: int
        """
        return self._after_block

    @after_block.setter
    def after_block(self, after_block):
        """Sets the after_block of this BlockAtDate.

        Height

        :param after_block: The after_block of this BlockAtDate.
        :type after_block: int
        """
        if after_block is None:
            raise BadUserInputException("Invalid value for `after_block`, must not be `None`")
        if after_block is not None and after_block < 0:
            raise BadUserInputException("Invalid value for `after_block`, must be a value greater than or equal to `0`")

        self._after_block = after_block

    @property
    def after_timestamp(self):
        """Gets the after_timestamp of this BlockAtDate.

        Timestamp in posix seconds format

        :return: The after_timestamp of this BlockAtDate.
        :rtype: int
        """
        return self._after_timestamp

    @after_timestamp.setter
    def after_timestamp(self, after_timestamp):
        """Sets the after_timestamp of this BlockAtDate.

        Timestamp in posix seconds format

        :param after_timestamp: The after_timestamp of this BlockAtDate.
        :type after_timestamp: int
        """
        if after_timestamp is None:
            raise BadUserInputException("Invalid value for `after_timestamp`, must not be `None`")

        self._after_timestamp = after_timestamp
