# coding: utf-8
from gsrest.errors import BadUserInputException
from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ActorContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coingecko_ids: List[str]=None, defilama_ids: List[str]=None, github_organisation: str=None, images: List[str]=None, legal_name: str=None, refs: List[str]=None, twitter_handle: str=None, uris: List[str]=None):
        """ActorContext - a model defined in OpenAPI

        :param coingecko_ids: The coingecko_ids of this ActorContext.
        :param defilama_ids: The defilama_ids of this ActorContext.
        :param github_organisation: The github_organisation of this ActorContext.
        :param images: The images of this ActorContext.
        :param legal_name: The legal_name of this ActorContext.
        :param refs: The refs of this ActorContext.
        :param twitter_handle: The twitter_handle of this ActorContext.
        :param uris: The uris of this ActorContext.
        """
        self.openapi_types = {
            'coingecko_ids': List[str],
            'defilama_ids': List[str],
            'github_organisation': str,
            'images': List[str],
            'legal_name': str,
            'refs': List[str],
            'twitter_handle': str,
            'uris': List[str]
        }

        self.attribute_map = {
            'coingecko_ids': 'coingecko_ids',
            'defilama_ids': 'defilama_ids',
            'github_organisation': 'github_organisation',
            'images': 'images',
            'legal_name': 'legal_name',
            'refs': 'refs',
            'twitter_handle': 'twitter_handle',
            'uris': 'uris'
        }

        self._coingecko_ids = coingecko_ids
        self._defilama_ids = defilama_ids
        self._github_organisation = github_organisation
        self._images = images
        self._legal_name = legal_name
        self._refs = refs
        self._twitter_handle = twitter_handle
        self._uris = uris

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActorContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The actor_context of this ActorContext.
        """
        return util.deserialize_model(dikt, cls)

    def to_dict(self, shallow=False):
        """Returns the model as a dict:

        :return: The ActorContext as a dict
        :rtype: dict
        """
        if not shallow:
            return Model.to_dict(self)
        return { 'coingecko_ids': self._coingecko_ids,
            'defilama_ids': self._defilama_ids,
            'github_organisation': self._github_organisation,
            'images': self._images,
            'legal_name': self._legal_name,
            'refs': self._refs,
            'twitter_handle': self._twitter_handle,
            'uris': self._uris }


    @property
    def coingecko_ids(self):
        """Gets the coingecko_ids of this ActorContext.

        list of references to coingecko exchanges or coins

        :return: The coingecko_ids of this ActorContext.
        :rtype: List[str]
        """
        return self._coingecko_ids

    @coingecko_ids.setter
    def coingecko_ids(self, coingecko_ids):
        """Sets the coingecko_ids of this ActorContext.

        list of references to coingecko exchanges or coins

        :param coingecko_ids: The coingecko_ids of this ActorContext.
        :type coingecko_ids: List[str]
        """
        if coingecko_ids is None:
            raise BadUserInputException("Invalid value for `coingecko_ids`, must not be `None`")

        self._coingecko_ids = coingecko_ids

    @property
    def defilama_ids(self):
        """Gets the defilama_ids of this ActorContext.

        list of references to defilama

        :return: The defilama_ids of this ActorContext.
        :rtype: List[str]
        """
        return self._defilama_ids

    @defilama_ids.setter
    def defilama_ids(self, defilama_ids):
        """Sets the defilama_ids of this ActorContext.

        list of references to defilama

        :param defilama_ids: The defilama_ids of this ActorContext.
        :type defilama_ids: List[str]
        """
        if defilama_ids is None:
            raise BadUserInputException("Invalid value for `defilama_ids`, must not be `None`")

        self._defilama_ids = defilama_ids

    @property
    def github_organisation(self):
        """Gets the github_organisation of this ActorContext.

        semi-colon separated list of github organisations used by the actor

        :return: The github_organisation of this ActorContext.
        :rtype: str
        """
        return self._github_organisation

    @github_organisation.setter
    def github_organisation(self, github_organisation):
        """Sets the github_organisation of this ActorContext.

        semi-colon separated list of github organisations used by the actor

        :param github_organisation: The github_organisation of this ActorContext.
        :type github_organisation: str
        """

        self._github_organisation = github_organisation

    @property
    def images(self):
        """Gets the images of this ActorContext.

        list of uris to logos of the actor

        :return: The images of this ActorContext.
        :rtype: List[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ActorContext.

        list of uris to logos of the actor

        :param images: The images of this ActorContext.
        :type images: List[str]
        """
        if images is None:
            raise BadUserInputException("Invalid value for `images`, must not be `None`")

        self._images = images

    @property
    def legal_name(self):
        """Gets the legal_name of this ActorContext.

        Name of the legal entity registerd by the actor.

        :return: The legal_name of this ActorContext.
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this ActorContext.

        Name of the legal entity registerd by the actor.

        :param legal_name: The legal_name of this ActorContext.
        :type legal_name: str
        """

        self._legal_name = legal_name

    @property
    def refs(self):
        """Gets the refs of this ActorContext.

        list of uris to further information of the actors.

        :return: The refs of this ActorContext.
        :rtype: List[str]
        """
        return self._refs

    @refs.setter
    def refs(self, refs):
        """Sets the refs of this ActorContext.

        list of uris to further information of the actors.

        :param refs: The refs of this ActorContext.
        :type refs: List[str]
        """
        if refs is None:
            raise BadUserInputException("Invalid value for `refs`, must not be `None`")

        self._refs = refs

    @property
    def twitter_handle(self):
        """Gets the twitter_handle of this ActorContext.

        semi-colon separated list of twitter handles used by the actor

        :return: The twitter_handle of this ActorContext.
        :rtype: str
        """
        return self._twitter_handle

    @twitter_handle.setter
    def twitter_handle(self, twitter_handle):
        """Sets the twitter_handle of this ActorContext.

        semi-colon separated list of twitter handles used by the actor

        :param twitter_handle: The twitter_handle of this ActorContext.
        :type twitter_handle: str
        """

        self._twitter_handle = twitter_handle

    @property
    def uris(self):
        """Gets the uris of this ActorContext.

        list of additonal uris identifying the actor

        :return: The uris of this ActorContext.
        :rtype: List[str]
        """
        return self._uris

    @uris.setter
    def uris(self, uris):
        """Sets the uris of this ActorContext.

        list of additonal uris identifying the actor

        :param uris: The uris of this ActorContext.
        :type uris: List[str]
        """
        if uris is None:
            raise BadUserInputException("Invalid value for `uris`, must not be `None`")

        self._uris = uris
